<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"
  xmlns:atom="http://www.w3.org/2005/Atom"
  xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>아키하바라와 개발정보를 공유하는 블로그 입니다.</title>
    <link>https://playneko.github.io/</link>
    
    <atom:link href="https://playneko.github.io/rss2.xml" rel="self" type="application/rss+xml"/>
    
    <description></description>
    <pubDate>Fri, 25 Dec 2020 00:29:51 GMT</pubDate>
    <generator>http://hexo.io/</generator>
    
    <item>
      <title>라즈베리파이로 레트로(ReTroPie) 게임기 만들기</title>
      <link>https://playneko.github.io/2020/06/20/rasberry-pi-026/</link>
      <guid>https://playneko.github.io/2020/06/20/rasberry-pi-026/</guid>
      <pubDate>Fri, 19 Jun 2020 16:00:00 GMT</pubDate>
      
      <description>&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;라즈베리파이로 레트로(ReTroPie) 게임기 만들기&lt;br&gt;이번에 소개할 내용은 라즈베리파이를 이용해서 레트로(ReTroPie) 게임기를 만들어 보겠습니다.&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<!-- excerpt --><h2 id="라즈베리파이로-레트로-ReTroPie-게임기-만들기"><a href="#라즈베리파이로-레트로-ReTroPie-게임기-만들기" class="headerlink" title="라즈베리파이로 레트로(ReTroPie) 게임기 만들기"></a>라즈베리파이로 레트로(ReTroPie) 게임기 만들기</h2><p>안녕하세요.</p><p>이번에 소개할 내용은 라즈베리파이를 이용해서 레트로(ReTroPie) 게임기를 만들어 보겠습니다.</p><p>고전게임을 좋아하시거나 고전게임이 무엇인지 잘 모르시는 분들께 한번 만들어서 즐기시는것을</p><p>한번쯤 추천을 드리겠습니다.</p><p>오랜만에 옛날게임을 즐기며 추억의 향수를 느끼실수 있습니다.</p><blockquote><h5 id="준비물"><a href="#준비물" class="headerlink" title="준비물"></a>준비물</h5><ul><li>라즈베리파이 3(Raspberry Pi 3 model B)</li><li>레트로파이용 전용 케이스</li><li>SD카드 8기가 이상</li><li>HDMI케이블</li><li>5V 2A USB 케이블과 어뎁터</li><li>USB키보드 또는 게임기 패드</li></ul></blockquote><p>위의 준비물이 갖춰졌으면 본격적으로 레트로 게임기를 만들어 보겠습니다.</p><h4 id="라즈베리파이-오락실"><a href="#라즈베리파이-오락실" class="headerlink" title="라즈베리파이 오락실"></a>라즈베리파이 오락실</h4><p>레트로파이 간략한 준비물의 상태는 아래와 같습니다.</p><p><img src="001-5.jpg" alt="image"></p><p>케이스를 꺼내기전 박스포장된 상태 입니다.</p><p>박스포장도 레트로 게임기 디자인으로 되어 있습니다.</p><p><img src="002-3.jpg" alt="image"></p><p>박스에서 레트로게임기 케이스를 꺼낸 모습 입니다.</p><p>옆에는 각 구조 설명과 조립방법이 적혀져 있습니다.</p><p><img src="003-1.jpg" alt="image"></p><p>조립하기전 부품 상세 내용물 입니다.</p><p><img src="004-1.jpg" alt="image"></p><p>조립이 완성되었습니다.</p><p>본격적으로 게임기로 사용할수 있게 다음 준비를 하도록 하겠습니다.</p><p>우선 SD카드에 레트로파이용 OS를 설치부터 진행을 하도록 하겠습니다.</p><p>SD카드를 컴퓨터에 삽입후 balenaEtcher를 실행해 주세요.</p><p>balenaEtcher에 대해 잘 모르실경우 라즈베리파이3 B 설치하기를 참고해 주세요.</p><p>SD카드를 삽입을 하시고 balenaEtcher를 실행을 해주셨으면</p><p>아래의 레트로파이 사이트에서 레트로파이용 OS를 다운로드 받아주세요.</p><p><a href="https://retropie.org.uk/download/">https://retropie.org.uk/download/</a></p><p><img src="001-13.png" alt="image"></p><p>보유하신 라즈베리파이 기종에 맞게 다운로드를 해주시기 바랍니다.</p><p><img src="002-13.png" alt="image"></p><p>balenaEtcher를 실행한 상태 입니다.</p><p><img src="003-14.png" alt="image"></p><p>첫번째에 다운로드 받으신 레트로파이 OS 이미지파일을 선택하시고</p><p>두번째는 컴퓨터에 삽입하신 SD카드를 선택해 주세요. 그리고 마지막 Flash!버튼을 눌러주시기 바랍니다.</p><p><img src="004-13.png" alt="image"></p><p><img src="005-9.png" alt="image"></p><p>위와같이 나오면 SD카드를 포맷후 레트로파이 OS 설치가 진행 됩니다.</p><p><img src="006-10.png" alt="image"></p><p>레트로파이 OS 설치가 완료 되었습니다.</p><p>SD카드를 추출하시고 라즈베리파이에 삽입을 해주시기 바랍니다.</p><p>그리고 모니터 또는 티비에 연결을 하신후 전원을 넣어주시기 바랍니다.</p><p><img src="006.jpg" alt="image"></p><p>그러면 레트로파이 OS가 기동을 하는게 나오게 됩니다.</p><p>조금 기다리시면 자동으로 넘어가게 됩니다.</p><p><img src="007.jpg" alt="image"></p><p>처음 화면 입니다.</p><p><img src="008.jpg" alt="image"></p><p>USB키보드 또는 게임기 패드로 조작키 설정을 하는 화면이 나오게 되며</p><p>안내대로 따라서 설정을 하시고 완료를 하시면 됩니다.</p><p><img src="009.jpg" alt="image"></p><p>모든 설정이 끝나면 이런 화면이 나오고 이제 게임을 즐기실수 있습니다.</p>]]></content:encoded>
      
      
      <category domain="https://playneko.github.io/categories/Rasberry-Pi/">Rasberry Pi</category>
      
      <category domain="https://playneko.github.io/categories/Rasberry-Pi/%EC%95%84%ED%82%A4%EB%B0%94-%EC%A0%95%EB%B3%B4/">아키바 정보</category>
      
      
      <category domain="https://playneko.github.io/tags/Rasberry-Pi/">Rasberry Pi</category>
      
      <category domain="https://playneko.github.io/tags/SSH/">SSH</category>
      
      <category domain="https://playneko.github.io/tags/VNC/">VNC</category>
      
      <category domain="https://playneko.github.io/tags/%E3%83%A9%E3%82%BA%E3%83%99%E3%83%AA%E3%83%BC%E3%83%91%E3%82%A4/">ラズベリーパイ</category>
      
      <category domain="https://playneko.github.io/tags/%EB%9D%BC%EC%A6%88%EB%B2%A0%EB%A6%AC%ED%8C%8C%EC%9D%B4/">라즈베리파이</category>
      
      <category domain="https://playneko.github.io/tags/balenaEtcher/">balenaEtcher</category>
      
      <category domain="https://playneko.github.io/tags/HDMI/">HDMI</category>
      
      <category domain="https://playneko.github.io/tags/OS/">OS</category>
      
      <category domain="https://playneko.github.io/tags/ReTroPie/">ReTroPie</category>
      
      <category domain="https://playneko.github.io/tags/SD%EC%B9%B4%EB%93%9C/">SD카드</category>
      
      <category domain="https://playneko.github.io/tags/%EA%B2%8C%EC%9E%84%EA%B8%B0/">게임기</category>
      
      <category domain="https://playneko.github.io/tags/%EA%B2%8C%EC%9E%84%EA%B8%B0-%ED%8C%A8%EB%93%9C/">게임기 패드</category>
      
      <category domain="https://playneko.github.io/tags/%EA%B3%A0%EC%A0%84%EA%B2%8C%EC%9E%84/">고전게임</category>
      
      <category domain="https://playneko.github.io/tags/%EB%A0%88%ED%8A%B8%EB%A1%9C/">레트로</category>
      
      <category domain="https://playneko.github.io/tags/%EC%98%A4%EB%9D%BD%EC%8B%A4/">오락실</category>
      
      
      <comments>https://playneko.github.io/2020/06/20/rasberry-pi-026/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>라즈베리파이에 GPIO 파이썬을 이용해 초음파 센서(HC-SR04) 제어하기</title>
      <link>https://playneko.github.io/2020/06/19/rasberry-pi-025/</link>
      <guid>https://playneko.github.io/2020/06/19/rasberry-pi-025/</guid>
      <pubDate>Thu, 18 Jun 2020 16:00:00 GMT</pubDate>
      
      <description>&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;라즈베리파이에 GPIO 파이썬을 이용해 초음파 센서(HC-SR04) 제어하기&lt;br&gt;이번에 소개할 내용은 라즈베리파이에 GPIO, 파이썬을 이용해 초음파 센서(HC-SR04) 제어하기 입니다.&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<!-- excerpt --><h2 id="라즈베리파이에-GPIO-파이썬을-이용해-초음파-센서-HC-SR04-제어하기"><a href="#라즈베리파이에-GPIO-파이썬을-이용해-초음파-센서-HC-SR04-제어하기" class="headerlink" title="라즈베리파이에 GPIO 파이썬을 이용해 초음파 센서(HC-SR04) 제어하기"></a>라즈베리파이에 GPIO 파이썬을 이용해 초음파 센서(HC-SR04) 제어하기</h2><p>안녕하세요.</p><p>이번에 소개할 내용은 라즈베리파이에 GPIO, 파이썬을 이용해 초음파 센서(HC-SR04) 제어하기 입니다.</p><p>초음파 센서를 통해서 거리를 계산을 하거나 할경우 이용을 하실수가 있습니다.</p><p>초음파 센서를 제어하기 위해선 우선 준비물이 필요합니다.</p><blockquote><h5 id="준비물"><a href="#준비물" class="headerlink" title="준비물"></a>준비물</h5><ul><li>라즈베리파이 OS가 설치된 라즈베리파이</li><li>ELEGOO Arduino용 HC-SR04 초음파 센서 1개</li><li>점퍼케이블 암,수 4줄</li><li>플레이트 보드 1개</li><li>1KΩ 저항 1개, 2KΩ저항 1개</li></ul></blockquote><p>준비물이 준비가 되셨으면 본격적으로 초음파 센서 제어를 해보도록 하겠습니다.</p><p>아래의 회로도를 참고하셔서 케이블과 센서를 연결을 해주시기 바랍니다.</p><p><img src="001-12.png" alt="image"></p><p><img src="RasPiGPIO.png" alt="image"></p><p><img src="001-4.jpg" alt="image"></p><p><img src="002-2.jpg" alt="image"></p><blockquote><ul><li>1KΩ 저항은 Echo와 연결을 해주세요.</li><li>2KΩ 저항은 GND와 연결을 해주세요.</li><li>Trig는 GPIO 17번과 연결을 해주세요.</li><li>Echo는 GPIO 18번과 연결을 해주세요.</li></ul></blockquote><p>Echo의 경우 5V의 전압을 사용하기 때문에</p><p>저항을 이용해서 라즈베리파이에 부담을 주지않는 3.3V로 다시 낮춰 주셔야만 합니다.</p><table><thead><tr><th align="center">Color</th><th align="center">Pi GPIO Pin</th><th align="center">Notes</th></tr></thead><tbody><tr><td align="center">Red</td><td align="center">2</td><td align="center">5V</td></tr><tr><td align="center">Yellow</td><td align="center">11</td><td align="center">17</td></tr><tr><td align="center">White</td><td align="center">12</td><td align="center">18(PWM0)</td></tr><tr><td align="center">Gray</td><td align="center">39</td><td align="center">GND</td></tr></tbody></table><p>GPIO핀에 대한 자세한 내용을 원하시는 분은 아래의 링크를 들어가셔서 참고해 주세요.</p><p><a href="https://playneko.github.io/2020/05/28/rasberry-pi-011/">라즈베리파이에서 GPIO를 사용하기전 알아두어야 할 사항</a></p><p>위와같이 라즈베리파이와 플레이트 보드의 구성을 모두 마치셨으면</p><p>이제 본격적인 코딩을 해야만 합니다.</p><p>Visual Studio Code(비주얼 스튜디오 코드)를 실행해 주시기 바랍니다</p><p><img src="002-12.png" alt="image"></p><p>실행을 하셨으면 파일명을 gpio_HC-SR04.py로 추가를 해주시기 바랍니다.</p><p><img src="003-13.png" alt="image"></p><p>간단한 예제로 파이썬을 이용해 초음파 센서(HC-SR04)를 제어할 소스를 작성 하겠습니다.</p><p>아래의 코드를 입력해 주세요.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> RPi.GPIO <span class="keyword">as</span> GPIO</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line">print(<span class="string">&quot;AkibaTV HC-SR04 Start&quot;</span>)</span><br><span class="line"></span><br><span class="line">GPIO.setmode(GPIO.BCM)</span><br><span class="line"><span class="comment"># Yellow : Pin 11 : 17(Trig)</span></span><br><span class="line">GPIO.setup(<span class="number">17</span>, GPIO.OUT)</span><br><span class="line"><span class="comment"># White : Pin 12 : 18(Echo)</span></span><br><span class="line">GPIO.setup(<span class="number">18</span>, GPIO.IN)</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        GPIO.output(<span class="number">17</span>, <span class="literal">False</span>)</span><br><span class="line">        time.sleep(<span class="number">0.5</span>)</span><br><span class="line"></span><br><span class="line">        GPIO.output(<span class="number">17</span>, <span class="literal">True</span>)</span><br><span class="line">        time.sleep(<span class="number">0.00001</span>)</span><br><span class="line">        GPIO.output(<span class="number">17</span>, <span class="literal">False</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 18번이 OFF가 되는 시점을 시작시간으로 설정</span></span><br><span class="line">        <span class="keyword">while</span> GPIO.<span class="built_in">input</span>(<span class="number">18</span>) == <span class="number">0</span>:</span><br><span class="line">            start = time.time()</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 18번이 ON이 되는 시점을 반사파 수신시간으로 설정</span></span><br><span class="line">        <span class="keyword">while</span> GPIO.<span class="built_in">input</span>(<span class="number">18</span>) == <span class="number">1</span>:</span><br><span class="line">            stop = time.time()</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 초음파가 되돌아오는 시간차로 거리를 계산한다</span></span><br><span class="line">        time_interval = stop - start</span><br><span class="line">        distance = time_interval * <span class="number">17000</span></span><br><span class="line">        distance = <span class="built_in">round</span>(distance, <span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">        print(<span class="string">&quot;Distance =&gt; &quot;</span>, distance, <span class="string">&quot;cm&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">except</span> KeyboardInterrupt:</span><br><span class="line">    GPIO.cleanup()</span><br><span class="line">    print(<span class="string">&quot;AkibaTV HC-SR04 End&quot;</span>)</span><br></pre></td></tr></table></figure><p>작성하신 소스를 라즈베리파이에 넣고 실행을 하기위해</p><p>소스파일을 라즈베리파이의 임의의 폴더에 올려주시기 바랍니다.</p><p>그리고 라즈베리파이를 VNC를 이용해 접속후 터미널을 실행해 주세요.</p><p><img src="004-1-2.png" alt="image"></p><p>라즈베리파이의 리스트 목록을 보시면 gpio_HC-SR04.py 파일명으로 파일이 올라가 있는걸 확인할수 있습니다.</p><p>이제 명령어로 초음파 센서(HC-SR04)가 작동하는지 확인 해보도록 하겠습니다.</p><p>아래의 명령어를 입력해 주세요.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 파이썬 2.x버전대를 이용하실경우</span></span><br><span class="line">$ sudo python ./gpio_HC-SR04.py</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 파이썬 3.x버전대를 이용하실경우</span></span><br><span class="line">$ sudo python3 ./gpio_HC-SR04.py</span><br></pre></td></tr></table></figure><p>저의 경우는 파이썬을 3.x버전대를 사용하고 있기에 3.x의 명령어로 실행을 하도록 하겠습니다.</p><p><img src="005-8.png" alt="image"></p><p>위와같이 초음파가 실행되면 거리에 대한 값이 터미널에 출력되는것을 확인 하실수 있습니다.</p><p>미묘한 오차는 발생할수는 있을수가 있겠습니다.</p><p>초음파 센서를 이용하시면 원거리의 값이나 가까이에 무엇인가 있을경우 측정을 하실때</p><p>유용하게 사용할수가 있겠습니다.</p><p>다음에는 좀더 다양한 방법으로 초음파 센서를 이용한 방법을 소개해 드리도록 하겠습니다.</p>]]></content:encoded>
      
      
      <category domain="https://playneko.github.io/categories/Rasberry-Pi/">Rasberry Pi</category>
      
      <category domain="https://playneko.github.io/categories/Rasberry-Pi/Python/">Python</category>
      
      
      <category domain="https://playneko.github.io/tags/Rasberry-Pi/">Rasberry Pi</category>
      
      <category domain="https://playneko.github.io/tags/SSH/">SSH</category>
      
      <category domain="https://playneko.github.io/tags/VNC/">VNC</category>
      
      <category domain="https://playneko.github.io/tags/%E3%83%A9%E3%82%BA%E3%83%99%E3%83%AA%E3%83%BC%E3%83%91%E3%82%A4/">ラズベリーパイ</category>
      
      <category domain="https://playneko.github.io/tags/%EB%9D%BC%EC%A6%88%EB%B2%A0%EB%A6%AC%ED%8C%8C%EC%9D%B4/">라즈베리파이</category>
      
      <category domain="https://playneko.github.io/tags/GPIO/">GPIO</category>
      
      <category domain="https://playneko.github.io/tags/Python/">Python</category>
      
      <category domain="https://playneko.github.io/tags/%ED%8C%8C%EC%9D%B4%EC%8D%AC/">파이썬</category>
      
      <category domain="https://playneko.github.io/tags/Visual-Studio-Code/">Visual Studio Code</category>
      
      <category domain="https://playneko.github.io/tags/%EB%B9%84%EC%A3%BC%EC%96%BC-%EC%8A%A4%ED%8A%9C%EB%94%94%EC%98%A4-%EC%BD%94%EB%93%9C/">비주얼 스튜디오 코드</category>
      
      <category domain="https://playneko.github.io/tags/Echo/">Echo</category>
      
      <category domain="https://playneko.github.io/tags/HC-SR04/">HC-SR04</category>
      
      <category domain="https://playneko.github.io/tags/Trig/">Trig</category>
      
      <category domain="https://playneko.github.io/tags/%EC%B4%88%EC%9D%8C%ED%8C%8C/">초음파</category>
      
      <category domain="https://playneko.github.io/tags/%EC%B4%88%EC%9D%8C%ED%8C%8C-%EC%84%BC%EC%84%9C/">초음파 센서</category>
      
      
      <comments>https://playneko.github.io/2020/06/19/rasberry-pi-025/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>라즈베리파이 또는 리눅스에서 OpenJDK JAVA_HOME설정</title>
      <link>https://playneko.github.io/2020/06/16/rasberry-pi-024/</link>
      <guid>https://playneko.github.io/2020/06/16/rasberry-pi-024/</guid>
      <pubDate>Mon, 15 Jun 2020 16:00:00 GMT</pubDate>
      
      <description>&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;라즈베리파이 또는 리눅스에서 OpenJDK JAVA_HOME설정&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<!-- excerpt --><h2 id="라즈베리파이-또는-리눅스에서-OpenJDK-JAVA-HOME설정"><a href="#라즈베리파이-또는-리눅스에서-OpenJDK-JAVA-HOME설정" class="headerlink" title="라즈베리파이 또는 리눅스에서 OpenJDK JAVA_HOME설정"></a>라즈베리파이 또는 리눅스에서 OpenJDK JAVA_HOME설정</h2><p>안녕하세요.</p><p>이번에 소개할 내용은 라즈베리파이 또는 리눅스에서 OpenJDK JAVA_HOME설정 입니다.</p><p>저번시간에 라즈베리파이 또는 리눅스에서 OpenJDK 설치하기를 하셨으면</p><p>이부분을 필수로 설정을 해주셔야만 앞으로 JAVA프로그램을 라즈베리파이에서</p><p>구동하실때 문제없이 구동을 하실수가 있겠습니다.</p><p>JAVA_HOME은 설치하신 OpenJDK 경로와 버전을 신경쓰지 않고 바로 참조할수 있도록 하는</p><p>바로가기 기능이라고 보시면 되겠습니다.</p><p>아래는 설치하신 OpenJDK 에 따라서 설치 되어있는 경로 입니다.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># OpenJDK 11 버전</span></span><br><span class="line">$ OpenJDK 11 path – /usr/lib/jvm/java-11-openjdk-armhf/bin/java</span><br><span class="line"><span class="comment"># OpenJDK 8 버전</span></span><br><span class="line">$ OpenJDK 8 path – /usr/lib/jvm/java-8-openjdk-armhf/jre/bin/java</span><br></pre></td></tr></table></figure><p>이제 본격적으로 설정을 해보도록 하겠습니다.</p><h3 id="라즈베리파이-OpenJDK-11-또는-OpenJDK-8-JAVA-HOME-설정하기"><a href="#라즈베리파이-OpenJDK-11-또는-OpenJDK-8-JAVA-HOME-설정하기" class="headerlink" title="라즈베리파이 OpenJDK 11 또는 OpenJDK 8 JAVA_HOME 설정하기"></a>라즈베리파이 OpenJDK 11 또는 OpenJDK 8 JAVA_HOME 설정하기</h3><p>우선 라즈베리파이를 VNC를 이용해 접속후 터미널을 실행해 주세요.</p><p><img src="001-11.png" alt="image"></p><p>그럼 터미널에 아래의 명령어를 입력해 주세요.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># vi 에디터로 environment 파일을 엽니다.</span></span><br><span class="line">$ sudo vi /etc/environment</span><br></pre></td></tr></table></figure><p><img src="002-11.png" alt="image"></p><p>vi 에디터로 여시게 되면 아무것도 없는 빈페이지가 나오게 됩니다.</p><p>그럼 아래의 내용을 입력을 하시면 되겠습니다만</p><p>자신이 사용하시는 OpenJDK의 버전에 맞게 경로를 설정을 해주시면 되겠습니다.</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"># OpenJDK <span class="number">11</span>을 사용하시면 아래의 내용을 입력해 주시기 바랍니다.</span><br><span class="line">JAVA_HOME=<span class="string">&quot;path_of_your_default_version_of_java&quot;</span></span><br><span class="line"></span><br><span class="line"># OpenJDK <span class="number">8</span>을 설치하셨으면 아래의 내용을 입력해 주시기 바랍니다.</span><br><span class="line">JAVA_HOME=<span class="string">&quot;/usr/lib/jvm/java-8-openjdk-armhf/jre/bin/java&quot;</span></span><br><span class="line"></span><br><span class="line"># 주의사항 위의 내용을 두개다 적으시면 안됩니다. 무조건 <span class="number">1</span>개만 입력해 주세요.</span><br></pre></td></tr></table></figure><p><img src="003-12.png" alt="image"></p><p>입력을 다 하셨으면 :wq를 입력후 vi 에디터를 종료 합니다.</p><p>그리고 재부팅을 해야만 적용이 되니 아래의 명령어를 입력해서 재부팅을 하겠습니다.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 재부팅</span></span><br><span class="line">$ sudo reboot</span><br></pre></td></tr></table></figure><p><img src="004-11.png" alt="image"></p><p>재부팅을 하셨으면 다시 라즈베리파이를 VNC로 실행후 터미널을 실행해 주시기 바랍니다.</p><p><img src="001-11.png" alt="image"></p><p>아래의 명령어를 입력하셔서 JAVA_HOME이 정상적으로 등록되었는지 확인해 보도록 하겠습니다.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># JAVA_HOME 확인</span></span><br><span class="line">$ <span class="built_in">echo</span> <span class="variable">$JAVA_HOME</span></span><br></pre></td></tr></table></figure><p><img src="005-7.png" alt="image"></p><p>이렇게 해서 JAVA_HOME이 정상 등록이 되었습니다.</p><p>만일 설치하신 OpenJDK를 삭제를 하시고 싶으실 경우는 아래와 같이 하시면 되겠습니다.</p><p>자신의 환경에 맞게 버전을 선택하셔서 삭제를 해주시기 바랍니다.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># OpenJDK 11 버전을 삭제하실 경우</span></span><br><span class="line">$ sudo apt remove default-jdk</span><br><span class="line"></span><br><span class="line"><span class="comment"># OpenJDK 8 버전을 삭제하실 경우</span></span><br><span class="line">$ sudo apt remove openjdk-8-jdk</span><br></pre></td></tr></table></figure><p>저는 OpenJDK 8을 사용하고 있기에 OpenJDK 11을 삭제하도록 하겠습니다.</p><p><img src="006-9.png" alt="image"></p><p>삭제 명령어를 하시면 위와같이 삭제를 할건지 물어보게 되면 삭제를 하실경우 Y를 입력해 주세요.</p><p><img src="007-9.png" alt="image"></p><p>이렇게해서 OpenJDK 삭제가 완료 되었습니다.</p>]]></content:encoded>
      
      
      <category domain="https://playneko.github.io/categories/Rasberry-Pi/">Rasberry Pi</category>
      
      <category domain="https://playneko.github.io/categories/Rasberry-Pi/Java/">Java</category>
      
      <category domain="https://playneko.github.io/categories/Rasberry-Pi/Java/Linux/">Linux</category>
      
      
      <category domain="https://playneko.github.io/tags/Rasberry-Pi/">Rasberry Pi</category>
      
      <category domain="https://playneko.github.io/tags/SSH/">SSH</category>
      
      <category domain="https://playneko.github.io/tags/VNC/">VNC</category>
      
      <category domain="https://playneko.github.io/tags/%E3%83%A9%E3%82%BA%E3%83%99%E3%83%AA%E3%83%BC%E3%83%91%E3%82%A4/">ラズベリーパイ</category>
      
      <category domain="https://playneko.github.io/tags/%EB%9D%BC%EC%A6%88%EB%B2%A0%EB%A6%AC%ED%8C%8C%EC%9D%B4/">라즈베리파이</category>
      
      <category domain="https://playneko.github.io/tags/vi/">vi</category>
      
      <category domain="https://playneko.github.io/tags/linux/">linux</category>
      
      <category domain="https://playneko.github.io/tags/%EB%A6%AC%EB%88%85%EC%8A%A4/">리눅스</category>
      
      <category domain="https://playneko.github.io/tags/apt-get/">apt-get</category>
      
      <category domain="https://playneko.github.io/tags/apt/">apt</category>
      
      <category domain="https://playneko.github.io/tags/zero/">zero</category>
      
      <category domain="https://playneko.github.io/tags/Java/">Java</category>
      
      <category domain="https://playneko.github.io/tags/java-version/">java -version</category>
      
      <category domain="https://playneko.github.io/tags/OpenJDK/">OpenJDK</category>
      
      <category domain="https://playneko.github.io/tags/openjdk-8-jre/">openjdk-8-jre</category>
      
      <category domain="https://playneko.github.io/tags/OpenJDK11/">OpenJDK11</category>
      
      <category domain="https://playneko.github.io/tags/OpenJDK8/">OpenJDK8</category>
      
      <category domain="https://playneko.github.io/tags/version/">version</category>
      
      <category domain="https://playneko.github.io/tags/%EC%9E%90%EB%B0%94/">자바</category>
      
      <category domain="https://playneko.github.io/tags/JAVA-HOME/">JAVA_HOME</category>
      
      
      <comments>https://playneko.github.io/2020/06/16/rasberry-pi-024/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>라즈베리파이 또는 리눅스에서 OpenJDK 설치하기</title>
      <link>https://playneko.github.io/2020/06/15/rasberry-pi-023/</link>
      <guid>https://playneko.github.io/2020/06/15/rasberry-pi-023/</guid>
      <pubDate>Sun, 14 Jun 2020 16:00:00 GMT</pubDate>
      
      <description>&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;라즈베리파이 또는 리눅스에서 OpenJDK 설치하기&lt;br&gt;이번에 소개할 내용은 라즈베리파이 또는 리눅스에서 OpenJDK 설치하기 입니다.&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<!-- excerpt --><h2 id="라즈베리파이-또는-리눅스에서-OpenJDK-설치하기"><a href="#라즈베리파이-또는-리눅스에서-OpenJDK-설치하기" class="headerlink" title="라즈베리파이 또는 리눅스에서 OpenJDK 설치하기"></a>라즈베리파이 또는 리눅스에서 OpenJDK 설치하기</h2><p>안녕하세요.</p><p>이번에 소개할 내용은 라즈베리파이 또는 리눅스에서 OpenJDK 설치하기 입니다.</p><p>라즈베리파이를 처음 설치하시면 일단 기본적으로 JDK가 설치가 되어있지 않기때문에</p><p>JAVA개발 또는 Tomcat과 연동후 홈페이지를 운영하실 분들은 OpenJDK를 수동으로</p><p>설치를 해주셔야만 합니다.</p><h3 id="라즈베리파이-OpenJDK-11-설치하기"><a href="#라즈베리파이-OpenJDK-11-설치하기" class="headerlink" title="라즈베리파이 OpenJDK 11 설치하기"></a>라즈베리파이 OpenJDK 11 설치하기</h3><p>우선 라즈베리파이를 VNC를 이용해 접속후 터미널을 실행해 주세요.</p><p><img src="001-10.png" alt="image"></p><p>우선 자바가 설치되어 있는지 확인을 위해 아래의 명령어를 터미널에 입력해 주세요.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ java -version</span><br></pre></td></tr></table></figure><p><img src="002-10.png" alt="image"></p><p>명령어를 입력후 위와같이 알수없는 명령어라고 나오면 JAVA관련 패키지가 설치가 되어있지 않은것 입니다.</p><p>그럼 설치를 위해 아래의 명령어를 입력해 주세요.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 자동 인스톨 프로그램을 최신화 합니다.</span></span><br><span class="line">$ sudo apt update</span><br><span class="line"></span><br><span class="line"><span class="comment"># 기본적은 가장 최신버전의 jdk를 설치 합니다.</span></span><br><span class="line">$ sudo apt install default-jdk</span><br></pre></td></tr></table></figure><p><img src="003-11.png" alt="image"></p><p>가지고 계신 라즈베리파이의 성능에 따라서 업데이트 시간에 조금 차이가 있을수 있겠습니다.</p><p><img src="004-10.png" alt="image"></p><p>OpenJDK설치가 완료 되었습니다만</p><p>위와 같이 에러가 나오면 라즈베리파이의 cpu코어가 최신의 JDK를 실행을 할수가 없는것 입니다.</p><p>그래도 설치가 제대로 되었는지 확인을 해야하기에 아래의 명령어를 입력해 주세요.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 자바 버전확인</span></span><br><span class="line">$ java –version</span><br></pre></td></tr></table></figure><p>터미널에 자바버전이 출력이 되시면 정상적으로 설치가 되신것 입니다.</p><p>그래도 구형 라즈베리파이를 사용하시는 분들이 좌절하지 않으시도록</p><p>어떻게하면 구형 라즈베리파이에서도 JDK를 사용할수 있는지 해보도록 하겠습니다.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 아래의 명령어를 터미널에 입력해 주세요.</span></span><br><span class="line"><span class="comment"># 일단은 OpenJDK8버전을 설치를 합니다.</span></span><br><span class="line">$ sudo apt-get install openjdk-8-jre</span><br></pre></td></tr></table></figure><p><img src="005-0.png" alt="image"></p><p><img src="006-8.png" alt="image"></p><p>명령어를 입력하시면 OpenJDK8버전을 설치하기 시작 합니다.</p><p><img src="007-8.png" alt="image"></p><p>이번에는 아무런 에러가 없이 무사히 설치가 완료 되었습니다.</p><p>설치가 완료되었으면 기존 기본으로 설치한 OpenJDK의 버전을 변경하도록 하겠습니다.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 설치가 완료되셨으면 아래의 명령어를 입력해 주세요.</span></span><br><span class="line">$ sudo update-alternatives --config java</span><br></pre></td></tr></table></figure><p><img src="008-8.png" alt="image"></p><p>위와같은 화면이 나오시게 되면 기본으로 사용하실 OpenJDK 버전을 변경하실수 있습니다.</p><p>그럼 새롭게 설치한 OpenJDK8버전인 2를 입력하시기 바랍니다.</p><p><img src="009-6.png" alt="image"></p><p>그러면 설정이 변경이 되었습니다.</p><p>그러면 이제 자바가 정상 설치와 버전변경이 되었는지 확인을 해보도록 하겠습니다.</p><p>아래의 명령어를 입력해 주세요.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 자바 버전확인</span></span><br><span class="line">$ java –version</span><br></pre></td></tr></table></figure><p><img src="010-6.png" alt="image"></p><p>OpenJDK버전도 정상적으로 출력되신것을 확인 하실수 있습니다.</p><p>이것으로 라즈베리파이 또는 리눅스에서 OpenJDK 설치하기를 해보았습니다.</p>]]></content:encoded>
      
      
      <category domain="https://playneko.github.io/categories/Rasberry-Pi/">Rasberry Pi</category>
      
      <category domain="https://playneko.github.io/categories/Rasberry-Pi/Java/">Java</category>
      
      <category domain="https://playneko.github.io/categories/Rasberry-Pi/Java/Linux/">Linux</category>
      
      
      <category domain="https://playneko.github.io/tags/Rasberry-Pi/">Rasberry Pi</category>
      
      <category domain="https://playneko.github.io/tags/SSH/">SSH</category>
      
      <category domain="https://playneko.github.io/tags/VNC/">VNC</category>
      
      <category domain="https://playneko.github.io/tags/%E3%83%A9%E3%82%BA%E3%83%99%E3%83%AA%E3%83%BC%E3%83%91%E3%82%A4/">ラズベリーパイ</category>
      
      <category domain="https://playneko.github.io/tags/%EB%9D%BC%EC%A6%88%EB%B2%A0%EB%A6%AC%ED%8C%8C%EC%9D%B4/">라즈베리파이</category>
      
      <category domain="https://playneko.github.io/tags/linux/">linux</category>
      
      <category domain="https://playneko.github.io/tags/%EB%A6%AC%EB%88%85%EC%8A%A4/">리눅스</category>
      
      <category domain="https://playneko.github.io/tags/apt-get/">apt-get</category>
      
      <category domain="https://playneko.github.io/tags/apt/">apt</category>
      
      <category domain="https://playneko.github.io/tags/zero/">zero</category>
      
      <category domain="https://playneko.github.io/tags/Java/">Java</category>
      
      <category domain="https://playneko.github.io/tags/java-version/">java -version</category>
      
      <category domain="https://playneko.github.io/tags/OpenJDK/">OpenJDK</category>
      
      <category domain="https://playneko.github.io/tags/openjdk-8-jre/">openjdk-8-jre</category>
      
      <category domain="https://playneko.github.io/tags/OpenJDK11/">OpenJDK11</category>
      
      <category domain="https://playneko.github.io/tags/OpenJDK8/">OpenJDK8</category>
      
      <category domain="https://playneko.github.io/tags/version/">version</category>
      
      <category domain="https://playneko.github.io/tags/%EC%9E%90%EB%B0%94/">자바</category>
      
      
      <comments>https://playneko.github.io/2020/06/15/rasberry-pi-023/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>라즈베리파이 GPIO 파이썬을 이용 PUSH버튼으로 LED점등</title>
      <link>https://playneko.github.io/2020/06/14/rasberry-pi-022/</link>
      <guid>https://playneko.github.io/2020/06/14/rasberry-pi-022/</guid>
      <pubDate>Sat, 13 Jun 2020 16:00:00 GMT</pubDate>
      
      <description>&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;라즈베리파이에서 GPIO 파이썬을 이용해서 PUSH버튼으로 LED점등 #2&lt;br&gt;이번에 소개할 내용은 라즈베리파이에서 GPIO, 파이썬을 이용해서 PUSH버튼으로 LED점등하기 #2 입니다.&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<!-- excerpt --><h2 id="라즈베리파이에서-GPIO-파이썬을-이용해서-PUSH버튼으로-LED점등-2"><a href="#라즈베리파이에서-GPIO-파이썬을-이용해서-PUSH버튼으로-LED점등-2" class="headerlink" title="라즈베리파이에서 GPIO 파이썬을 이용해서 PUSH버튼으로 LED점등 #2"></a>라즈베리파이에서 GPIO 파이썬을 이용해서 PUSH버튼으로 LED점등 #2</h2><p>안녕하세요.</p><p>이번에 소개할 내용은 라즈베리파이에서 GPIO, 파이썬을 이용해서 PUSH버튼으로 LED점등하기 #2 입니다.</p><p>우리가 일상적으로 집에 들어왔을경우 버튼을 누르고 거실의 등을 키는것과 같은 역활로</p><p>버튼을 누르게 되면 LED 2개가 순차적으로 점등이 되는것을 만들어 보도록 하겠습니다.</p><blockquote><h5 id="준비물"><a href="#준비물" class="headerlink" title="준비물"></a>준비물</h5><ul><li>라즈베리파이 OS, 파이썬 설치가 완료된 상태</li><li>점퍼케이블 암/수 5줄, 수컷 3줄</li><li>플레이트 보드</li><li>저항 330Ω 2개, 10KΩ 1개</li><li>LED전구 2개</li><li>푸쉬버튼</li></ul></blockquote><p><img src="001-3.jpg" alt="image"></p><p>색깔별 점퍼케이블의 연결순서는 아래의 표를 참고해 주세요.</p><table><thead><tr><th align="center">Color</th><th align="center">Pi GPIO Pin</th><th align="center">Notes</th></tr></thead><tbody><tr><td align="center">Red</td><td align="center">1</td><td align="center">3.3V</td></tr><tr><td align="center">White</td><td align="center">40</td><td align="center">21(SP1_SCLK)</td></tr><tr><td align="center">Brown</td><td align="center">10</td><td align="center">15(UART_RXD)</td></tr><tr><td align="center">Yellow</td><td align="center">8</td><td align="center">14(UART_TXD)</td></tr><tr><td align="center">Gray</td><td align="center">39</td><td align="center">GND</td></tr></tbody></table><p>GPIO핀에 대한 자세한 내용을 원하시는 분은 아래의 링크를 들어가셔서 참고해 주세요.</p><p><a href="https://playneko.github.io/2020/05/28/rasberry-pi-011/">라즈베리파이에서 GPIO를 사용하기전 알아두어야 할 사항</a></p><p>위와같이 라즈베리파이와 플레이트 보드의 구성을 모두 마치셨으면</p><p>이제 본격적인 코딩을 해야만 합니다.</p><p>Visual Studio Code(비주얼 스튜디오 코드)를 실행해 주시기 바랍니다.</p><p><img src="002-9.png" alt="image"></p><p>실행을 하셨으면 파일명을 gpio_multi_push_led.py로 추가를 해주시기 바랍니다.</p><p><img src="003-10.png" alt="image"></p><p>간단한 예제로 버튼을 누르면 첫번째 LED가 5초간 켜지고 꺼진뒤 2번째 LED가 켜지고 꺼지는 소스를 작성 하겠습니다.</p><p>아래의 코드를 입력해 주세요.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> RPi.GPIO <span class="keyword">as</span> GPIO</span><br><span class="line"></span><br><span class="line">GPIO.setmode(GPIO.BCM)</span><br><span class="line"></span><br><span class="line"><span class="comment"># PUSH Button</span></span><br><span class="line"><span class="comment"># 40Pin 21(SP1_SCLK)</span></span><br><span class="line">GPIO.setup(<span class="number">21</span>, GPIO.IN)</span><br><span class="line"></span><br><span class="line"><span class="comment"># LED</span></span><br><span class="line"><span class="comment"># 8 14(UART_TXD)</span></span><br><span class="line">GPIO.setup(<span class="number">14</span>, GPIO.OUT)</span><br><span class="line"><span class="comment"># 10 15(UART_RXD)</span></span><br><span class="line">GPIO.setup(<span class="number">15</span>, GPIO.OUT)</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        <span class="comment"># 40Pin의 버튼에 대한 입력값</span></span><br><span class="line">        inputIO = GPIO.<span class="built_in">input</span>(<span class="number">21</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 버튼이 눌렸는지 체크</span></span><br><span class="line">        <span class="keyword">if</span> inputIO == <span class="literal">False</span>:</span><br><span class="line">            <span class="comment"># LED를 켜기</span></span><br><span class="line">            GPIO.output(<span class="number">14</span>, GPIO.HIGH)</span><br><span class="line">            time.sleep(<span class="number">5</span>)</span><br><span class="line">            GPIO.output(<span class="number">14</span>, GPIO.LOW)</span><br><span class="line">            time.sleep(<span class="number">1</span>)</span><br><span class="line">            GPIO.output(<span class="number">15</span>, GPIO.HIGH)</span><br><span class="line">            time.sleep(<span class="number">5</span>)</span><br><span class="line">            GPIO.output(<span class="number">15</span>, GPIO.LOW)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="comment"># LED를 끄기</span></span><br><span class="line">            GPIO.output(<span class="number">14</span>, GPIO.LOW)</span><br><span class="line">            GPIO.output(<span class="number">15</span>, GPIO.LOW)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Ctrl + C키를 누르면 종료 됩니다.</span></span><br><span class="line"><span class="keyword">except</span> KeyboardInterrupt:</span><br><span class="line">    <span class="comment"># 종료시 LED를 무조건 끄기</span></span><br><span class="line">    GPIO.output(<span class="number">14</span>, GPIO.LOW)</span><br><span class="line">    GPIO.output(<span class="number">15</span>, GPIO.LOW)</span><br><span class="line"></span><br><span class="line"><span class="comment"># GPIO 클린업</span></span><br><span class="line"><span class="keyword">finally</span>:</span><br><span class="line">    GPIO.cleanup()</span><br></pre></td></tr></table></figure><p>작성하신 소스를 라즈베리파이에 넣고 실행을 하기위해</p><p>소스파일을 라즈베리파이의 임의의 폴더에 올려주시기 바랍니다.</p><p>그리고 라즈베리파이를 VNC를 이용해 접속후 터미널을 실행해 주세요.</p><p><img src="004-9.png" alt="image"></p><p>라즈베리파이의 리스트 목록을 보시면 gpio_multi_push_led.py 파일명으로 파일이 올라가 있는걸 확인할수 있습니다.</p><p>이제 명령어로 버튼을 눌렀을경우 순차적으로 LED가 켜지고 꺼지는지 확인 해보도록 하겠습니다.</p><p>아래의 명령어를 입력해 주세요.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 파이썬 2.x버전대를 이용하실경우</span></span><br><span class="line">$ sudo python ./gpio_multi_push_led.py</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 파이썬 3.x버전대를 이용하실경우</span></span><br><span class="line">$ sudo python3 ./gpio_multi_push_led.py</span><br></pre></td></tr></table></figure><p>저의 경우는 3.x버전대를 이용하기에 3.x버전대의 명령어로 실행을 하겠습니다.</p><p><img src="005-1-1.png" alt="image"></p><p>위와같이 실행이 된 상태에서 버튼을 눌러보시면 첫번째 LED가 켜지고 5초뒤에 두번째 LED가 켜지는것을 확인하실수 있습니다.</p><p>만일 LED가 켜키지 않을경우 배선이 맞게 되어있는지 LED를 (+,-)가 맞게 꼽혀있는지 확인해 주세요.</p><p>프로그램을 종료를 하실경우에는 Ctrl + C키를 눌러주시면 프로그램이 종료 됩니다.</p><p>이렇게해서 푸쉬버튼을 이용한 멀티 LED 켜고 끄기가 끝났습니다.</p><p>다음에도 더 다양한 방식을 소개하도록 하겠습니다.</p>]]></content:encoded>
      
      
      <category domain="https://playneko.github.io/categories/Rasberry-Pi/">Rasberry Pi</category>
      
      <category domain="https://playneko.github.io/categories/Rasberry-Pi/Python/">Python</category>
      
      
      <category domain="https://playneko.github.io/tags/Rasberry-Pi/">Rasberry Pi</category>
      
      <category domain="https://playneko.github.io/tags/SSH/">SSH</category>
      
      <category domain="https://playneko.github.io/tags/VNC/">VNC</category>
      
      <category domain="https://playneko.github.io/tags/%E3%83%A9%E3%82%BA%E3%83%99%E3%83%AA%E3%83%BC%E3%83%91%E3%82%A4/">ラズベリーパイ</category>
      
      <category domain="https://playneko.github.io/tags/%EB%9D%BC%EC%A6%88%EB%B2%A0%EB%A6%AC%ED%8C%8C%EC%9D%B4/">라즈베리파이</category>
      
      <category domain="https://playneko.github.io/tags/LED/">LED</category>
      
      <category domain="https://playneko.github.io/tags/GPIO/">GPIO</category>
      
      <category domain="https://playneko.github.io/tags/Python/">Python</category>
      
      <category domain="https://playneko.github.io/tags/%ED%8C%8C%EC%9D%B4%EC%8D%AC/">파이썬</category>
      
      <category domain="https://playneko.github.io/tags/Visual-Studio-Code/">Visual Studio Code</category>
      
      <category domain="https://playneko.github.io/tags/%EB%B9%84%EC%A3%BC%EC%96%BC-%EC%8A%A4%ED%8A%9C%EB%94%94%EC%98%A4-%EC%BD%94%EB%93%9C/">비주얼 스튜디오 코드</category>
      
      <category domain="https://playneko.github.io/tags/Button/">Button</category>
      
      <category domain="https://playneko.github.io/tags/Push/">Push</category>
      
      <category domain="https://playneko.github.io/tags/Push-Button/">Push Button</category>
      
      <category domain="https://playneko.github.io/tags/%EB%B2%84%ED%8A%BC/">버튼</category>
      
      <category domain="https://playneko.github.io/tags/%ED%91%B8%EC%89%AC%EB%B2%84%ED%8A%BC/">푸쉬버튼</category>
      
      
      <comments>https://playneko.github.io/2020/06/14/rasberry-pi-022/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>라즈베리파이 GPIO 파이썬을 이용 PUSH버튼으로 LED점등</title>
      <link>https://playneko.github.io/2020/06/13/rasberry-pi-021/</link>
      <guid>https://playneko.github.io/2020/06/13/rasberry-pi-021/</guid>
      <pubDate>Fri, 12 Jun 2020 16:00:00 GMT</pubDate>
      
      <description>&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;라즈베리파이에서 GPIO 파이썬을 이용해서 PUSH버튼으로 LED점등 #1&lt;br&gt;이번에 소개할 내용은 라즈베리파이에서 GPIO, 파이썬을 이용해서 PUSH버튼으로 LED점등하기 #1 입니다.&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<!-- excerpt --><h2 id="라즈베리파이에서-GPIO-파이썬을-이용해서-PUSH버튼으로-LED점등-1"><a href="#라즈베리파이에서-GPIO-파이썬을-이용해서-PUSH버튼으로-LED점등-1" class="headerlink" title="라즈베리파이에서 GPIO 파이썬을 이용해서 PUSH버튼으로 LED점등 #1"></a>라즈베리파이에서 GPIO 파이썬을 이용해서 PUSH버튼으로 LED점등 #1</h2><p>안녕하세요.</p><p>이번에 소개할 내용은 라즈베리파이에서 GPIO, 파이썬을 이용해서 PUSH버튼으로 LED점등하기 #1 입니다.</p><p>우리가 일상적으로 집에 들어왔을경우 버튼을 누르고 거실의 등을 키는것과 같은 역활로</p><p>버튼을 누르게 되면 LED가 점등이 되는것을 만들어 보도록 하겠습니다.</p><blockquote><h5 id="준비물"><a href="#준비물" class="headerlink" title="준비물"></a>준비물</h5><ul><li>라즈베리파이 OS, 파이썬 설치가 완료된 상태</li><li>점퍼케이블 암/수 4줄, 수컷 2줄</li><li>플레이트 보드</li><li>저항 330Ω, 10KΩ 각 1개씩</li><li>LED전구</li><li>푸쉬버튼</li></ul></blockquote><p><img src="002.jpg" alt="image"></p><p>저항과 점퍼케이블 연결 회로도와 같이 연결을 해주시면 되겠습니다.</p><p><img src="001-e1591430993708.jpg" alt="image"></p><p>색깔별 점퍼케이블의 연결순서는 아래의 표를 참고해 주세요.</p><table><thead><tr><th align="center">Color</th><th align="center">Pi GPIO Pin</th><th align="center">Notes</th></tr></thead><tbody><tr><td align="center">Red</td><td align="center">1</td><td align="center">3.3V</td></tr><tr><td align="center">Yellow</td><td align="center">31</td><td align="center">6(GPCLK2)</td></tr><tr><td align="center">Black</td><td align="center">39</td><td align="center">GND</td></tr><tr><td align="center">Blue</td><td align="center">40</td><td align="center">21(SP1_SCLK)</td></tr></tbody></table><p>GPIO핀에 대한 자세한 내용을 원하시는 분은 아래의 링크를 들어가셔서 참고해 주세요.</p><p>라즈베리파이에서 GPIO를 사용하기전 알아두어야 할 사항</p><p>위와같이 라즈베리파이와 플레이트 보드의 구성을 모두 마치셨으면</p><p>이제 본격적인 코딩을 해야만 합니다.</p><p>Visual Studio Code(비주얼 스튜디오 코드)를 실행해 주시기 바랍니다.</p><p><img src="003-7.png" alt="image"></p><p>실행을 하셨으면 파일명을 gpio_push_led.py로 추가를 해주시기 바랍니다.</p><p><img src="004-6.png" alt="image"></p><p>간단한 예제로 버튼을 누르면 LED가 켜지고 버튼을 떼면 LED가 꺼지는 소스를 작성 하겠습니다.</p><p>아래의 코드를 입력해 주세요.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> RPi.GPIO <span class="keyword">as</span> GPIO</span><br><span class="line"></span><br><span class="line">GPIO.setmode(GPIO.BCM)</span><br><span class="line"><span class="comment"># 31Pin GPCLK2</span></span><br><span class="line">GPIO.setup(<span class="number">6</span>, GPIO.OUT)</span><br><span class="line"><span class="comment"># 40Pin SP1_SCLK</span></span><br><span class="line">GPIO.setup(<span class="number">21</span>, GPIO.IN)</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        <span class="comment"># 40Pin의 버튼에 대한 입력값</span></span><br><span class="line">        inputIO = GPIO.<span class="built_in">input</span>(<span class="number">21</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 버튼이 눌렸는지 체크</span></span><br><span class="line">        <span class="keyword">if</span> inputIO == <span class="literal">False</span>:</span><br><span class="line">            <span class="comment"># LED를 켜기</span></span><br><span class="line">            GPIO.output(<span class="number">6</span>, GPIO.HIGH)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="comment"># LED를 끄기</span></span><br><span class="line">            GPIO.output(<span class="number">6</span>, GPIO.LOW)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Ctrl + C키를 누르면 종료 됩니다.</span></span><br><span class="line"><span class="keyword">except</span> KeyboardInterrupt:</span><br><span class="line">    <span class="comment"># 종료시 LED를 무조건 끄기</span></span><br><span class="line">    GPIO.output(<span class="number">6</span>, GPIO.LOW)</span><br><span class="line"></span><br><span class="line"><span class="comment"># GPIO 클린업</span></span><br><span class="line"><span class="keyword">finally</span>:</span><br><span class="line">    GPIO.cleanup()</span><br></pre></td></tr></table></figure><p>작성하신 소스를 라즈베리파이에 넣고 실행을 하기위해</p><p>소스파일을 라즈베리파이의 임의의 폴더에 올려주시기 바랍니다.</p><p>그리고 라즈베리파이를 VNC를 이용해 접속후 터미널을 실행해 주세요.</p><p><img src="005-5.png" alt="image"></p><p>라즈베리파이의 리스트 목록을 보시면 gpio_push_led.py 파일명으로 파일이 올라가 있는걸 확인할수 있습니다.</p><p>이제 명령어로 버튼을 눌렀을경우 LED가 켜지고 꺼지는지 확인 해보도록 하겠습니다.</p><p>아래의 명령어를 입력해 주세요.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 파이썬 2.x버전대를 이용하실경우</span></span><br><span class="line">$ sudo python ./gpio_push_led.py</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 파이썬 3.x버전대를 이용하실경우</span></span><br><span class="line">$ sudo python3 ./gpio_push_led.py</span><br></pre></td></tr></table></figure><p>저의 경우는 3.x버전대를 이용하기에 3.x버전대의 명령어로 실행을 하겠습니다.</p><p><img src="006-5.png" alt="image"></p><p>위와같이 실행이 된 상태에서 버튼을 눌러보시면 LED가 켜지는것을 확인하실수 있습니다.</p><p>만일 LED가 켜키지 않을경우 배선이 맞게 되어있는지 LED를 (+,-)가 맞게 꼽혀있는지 확인해 주세요.</p><p>프로그램을 종료를 하실경우에는 Ctrl + C키를 눌러주시면 프로그램이 종료 됩니다.</p><p>이렇게해서 푸쉬버튼을 이용한 LED 켜고 끄기가 끝났습니다.</p><p>이것을 이용을 하시면 좀더 다양한 방식으로 버튼을 이용한 여러가지 개발을 하실수가 있겠습니다.</p><p><a href="https://youtu.be/vH6dUXWdupM"><img src="http://img.youtube.com/vi/vH6dUXWdupM/0.jpg" alt="AkibaTV"></a></p>]]></content:encoded>
      
      
      <category domain="https://playneko.github.io/categories/Rasberry-Pi/">Rasberry Pi</category>
      
      <category domain="https://playneko.github.io/categories/Rasberry-Pi/Python/">Python</category>
      
      
      <category domain="https://playneko.github.io/tags/Rasberry-Pi/">Rasberry Pi</category>
      
      <category domain="https://playneko.github.io/tags/SSH/">SSH</category>
      
      <category domain="https://playneko.github.io/tags/VNC/">VNC</category>
      
      <category domain="https://playneko.github.io/tags/%E3%83%A9%E3%82%BA%E3%83%99%E3%83%AA%E3%83%BC%E3%83%91%E3%82%A4/">ラズベリーパイ</category>
      
      <category domain="https://playneko.github.io/tags/%EB%9D%BC%EC%A6%88%EB%B2%A0%EB%A6%AC%ED%8C%8C%EC%9D%B4/">라즈베리파이</category>
      
      <category domain="https://playneko.github.io/tags/LED/">LED</category>
      
      <category domain="https://playneko.github.io/tags/GPIO/">GPIO</category>
      
      <category domain="https://playneko.github.io/tags/Python/">Python</category>
      
      <category domain="https://playneko.github.io/tags/%ED%8C%8C%EC%9D%B4%EC%8D%AC/">파이썬</category>
      
      <category domain="https://playneko.github.io/tags/Visual-Studio-Code/">Visual Studio Code</category>
      
      <category domain="https://playneko.github.io/tags/%EB%B9%84%EC%A3%BC%EC%96%BC-%EC%8A%A4%ED%8A%9C%EB%94%94%EC%98%A4-%EC%BD%94%EB%93%9C/">비주얼 스튜디오 코드</category>
      
      <category domain="https://playneko.github.io/tags/Button/">Button</category>
      
      <category domain="https://playneko.github.io/tags/Push/">Push</category>
      
      <category domain="https://playneko.github.io/tags/Push-Button/">Push Button</category>
      
      <category domain="https://playneko.github.io/tags/%EB%B2%84%ED%8A%BC/">버튼</category>
      
      <category domain="https://playneko.github.io/tags/%ED%91%B8%EC%89%AC%EB%B2%84%ED%8A%BC/">푸쉬버튼</category>
      
      
      <comments>https://playneko.github.io/2020/06/13/rasberry-pi-021/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>라즈베리파이에 GPIO Python PWM Servo Motor 제어하기</title>
      <link>https://playneko.github.io/2020/06/11/rasberry-pi-020/</link>
      <guid>https://playneko.github.io/2020/06/11/rasberry-pi-020/</guid>
      <pubDate>Wed, 10 Jun 2020 16:00:00 GMT</pubDate>
      
      <description>&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;라즈베리파이에 GPIO Python PWM 컨트롤러로 Servo Motor 제어하기&lt;br&gt;이번에 소개할 내용은 라즈베리파이에서 GPIO Python PWM컨트롤러(PCA9685)로 Servo Motor 제어하기 입니다.&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<!-- excerpt --><h2 id="라즈베리파이에-GPIO-Python-PWM-컨트롤러로-Servo-Motor-제어하기"><a href="#라즈베리파이에-GPIO-Python-PWM-컨트롤러로-Servo-Motor-제어하기" class="headerlink" title="라즈베리파이에 GPIO Python PWM 컨트롤러로 Servo Motor 제어하기"></a>라즈베리파이에 GPIO Python PWM 컨트롤러로 Servo Motor 제어하기</h2><p>안녕하세요.</p><p>이번에 소개할 내용은 라즈베리파이에서 GPIO Python PWM컨트롤러(PCA9685)로 Servo Motor 제어하기 입니다.</p><p>저번에 소개드린 라즈베리파이에 GPIO와 Python으로 Servo Motor 제어하기에 이어서</p><p>이번에는 PWM컨트롤러(PCA9685)를 이용해서 좀더 많은 모터와 보조전력을 공급하며</p><p>복잡한 구성의 모터를 제어할수 있게 해주는 컨트롤러 입니다.</p><p>PWM컨트롤러(PCA9685)는 2개에 999엔정도에 구매가 가능 합니다.</p><p>일단 PWM컨트롤러(PCA9685)를 이용해서 서보모터 제어를 하기 위해선 준비물이 기존보다 조금더 많이 필요 하겠습니다.</p><blockquote><h5 id="준비물"><a href="#준비물" class="headerlink" title="준비물"></a>준비물</h5><ul><li>라즈베리파이 본체 OS설치와 Python설치가 끝난 상태</li><li>Servo Motor(서보모터)</li><li>PWM컨트롤러(PCA9685)</li><li>점퍼케이블 암컷으로 5줄</li></ul></blockquote><p>이렇게 준비물이 갖춰져 있는지 확인 하시고 PWM컨트롤러(PCA9685)로 Servo Motor(서보모터) 제어하기를 하겠습니다.</p><p><img src="001-1.jpg" alt="image"></p><p>점퍼케이블 5줄에 대해서 PWM컨트롤러(PCA9685)와 다음과 같이 연결을 해주시기 바랍니다.</p><table><thead><tr><th align="center">Color</th><th align="center">Pi GPIO Pin</th><th align="center">Notes</th><th align="center">PCA9685</th></tr></thead><tbody><tr><td align="center">Red</td><td align="center">2</td><td align="center">5V</td><td align="center">V+</td></tr><tr><td align="center">Brown</td><td align="center">1</td><td align="center">3.3V</td><td align="center">VCC</td></tr><tr><td align="center">Orange</td><td align="center">3</td><td align="center">2(I2C1_SDA1)</td><td align="center">SDA</td></tr><tr><td align="center">Yellow</td><td align="center">5</td><td align="center">3(I2C1_SCL1)</td><td align="center">SCL</td></tr><tr><td align="center">Green</td><td align="center">6</td><td align="center">GND</td><td align="center">GND</td></tr></tbody></table><p>라즈베리파이와 점퍼케이블 서보모터를 전부 연결을 하셨으면</p><p>우선 코딩을 해보도록 하겠습니다.</p><p>이번에도 오픈소스를 이용해 PWM컨트롤러 제어 소스를 참고해 만들어 보았습니다.</p><p>Visual Studio Code(비주얼 스튜디오 코드)를 실행해 주시기 바랍니다.</p><p>코딩에 들어가기에 앞서 VNC로 라즈베리파이에 접속후 터미널을 실행해 주세요.</p><p>아래의 명령어로 I2C연결된 위치를 확인 합니다.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo i2cdetect -y 1</span><br></pre></td></tr></table></figure><p><img src="007-7.png" alt="image"></p><p>위에 보듯이 PWM컨트롤러(PCA9685)의 I2C는 0x40과 0x70이라는 채널에 연결되어 있음을 알수 있습니다.</p><p>코드를 작성할때는 0x40 채널을 이용해서 작성을 하도록 하겠습니다.</p><p>그리고 파일명은 gpio_pwm_servo_motor.py 로 추가해 주시기 바랍니다.</p><p>아래의 코드를 작성해 주시기 바랍니다.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> RPi.GPIO <span class="keyword">as</span> GPIO</span><br><span class="line"><span class="keyword">import</span> Adafruit_PCA9685</span><br><span class="line"></span><br><span class="line"><span class="comment"># SG92R를 컨트롤하기 위한 클래스</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SG90_92R_Class</span>:</span></span><br><span class="line">    <span class="comment"># mPin : GPIO Number (PWM)</span></span><br><span class="line">    <span class="comment"># mPwm : PWM컨트롤러용 인스턴스</span></span><br><span class="line">    <span class="comment"># m_Zero_offset_duty</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, Channel, ZeroOffset</span>):</span></span><br><span class="line">        self.mChannel = Channel</span><br><span class="line">        self.m_ZeroOffset = ZeroOffset</span><br><span class="line"></span><br><span class="line">        <span class="comment"># Adafruit_PCA9685 초기화</span></span><br><span class="line">        <span class="comment"># address : PCA9685의 I2C Channel 0x40</span></span><br><span class="line">        self.mPwm = Adafruit_PCA9685.PCA9685(address = <span class="number">0x40</span>)</span><br><span class="line">        <span class="comment"># 50Hz로 설정하셔야 하지만 60Hz로 하시는게 좀더 좋습니다.</span></span><br><span class="line">        self.mPwm.set_pwm_freq(<span class="number">60</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 서보모터 위치 설정</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">SetPos</span>(<span class="params">self, pos</span>):</span></span><br><span class="line">        pulse = (<span class="number">650</span> - <span class="number">150</span>) * pos / <span class="number">180</span> + <span class="number">150</span> + self.m_ZeroOffset</span><br><span class="line">        self.mPwm.set_pwm(self.mChannel, <span class="number">0</span>, <span class="built_in">int</span>(pulse))</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 종료처리</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">Cleanup</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="comment"># 서보모터를 90도로 재설정</span></span><br><span class="line">        self.SetPos(<span class="number">90</span>)</span><br><span class="line">        time.sleep(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 여기가 시작하는 메인 입니다.</span></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    Servo = SG90_92R_Class(Channel = <span class="number">0</span>, ZeroOffset = -<span class="number">10</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            Servo.SetPos(<span class="number">0</span>)</span><br><span class="line">            time.sleep(<span class="number">1</span>)</span><br><span class="line">            Servo.SetPos(<span class="number">90</span>)</span><br><span class="line">            time.sleep(<span class="number">1</span>)</span><br><span class="line">            Servo.SetPos(<span class="number">180</span>)</span><br><span class="line">            time.sleep(<span class="number">1</span>)</span><br><span class="line">            Servo.SetPos(<span class="number">90</span>)</span><br><span class="line">            time.sleep(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Ctrl + C키를 누르면 종료 됩니다.</span></span><br><span class="line">    <span class="keyword">except</span> KeyboardInterrupt:</span><br><span class="line">        print(<span class="string">&quot;Ctrl + C&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        print(<span class="built_in">str</span>(e))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">finally</span>:</span><br><span class="line">        Servo.Cleanup()</span><br><span class="line">        print(<span class="string">&quot;exit program&quot;</span>)</span><br></pre></td></tr></table></figure><p><img src="006-7.png" alt="image"></p><p>코드 작성이 끝나셨으면 VNC로 라즈베리파이에 접속후 터미널을 실행해 주세요.</p><p><img src="001-9.png" alt="image"></p><p>PWM컨트롤러를 제어할 오픈소스를 깃허브에서 다운로드 받은후 설치를 하도록 하겠습니다.</p><p>오픈소스를 다운받기 위해 적당한 위치로 이동을 하신후 아래의 명령어를 차례대로 입력해 주세요.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$ git <span class="built_in">clone</span> https://github.com/adafruit/Adafruit_Python_PCA9685.git</span><br><span class="line">$ <span class="built_in">cd</span> Adafruit_Python_PCA9685</span><br><span class="line"></span><br><span class="line"><span class="comment"># 파이썬을 2.x버전대이신 분은 아래의 명령어를 입력해 주세요.</span></span><br><span class="line">$ sudo python setup.py install</span><br><span class="line"></span><br><span class="line"><span class="comment"># 파이썬을 3.x버전대이신 분은 아래의 명령어를 입력해 주세요.</span></span><br><span class="line">$ sudo python3 setup.py install</span><br></pre></td></tr></table></figure><p><img src="002-8.png" alt="image"></p><p>깃허브에서 소스를 다운로드가 시작되며 정상적으로 다운로드가 완료 되었습니다.</p><p><img src="003-9.png" alt="image"></p><p>다운로드한 소스폴더로 이동을 합니다.</p><p><img src="004-8.png" alt="image"></p><p>소스파일이 설치가 완료 되면 작성하신 소스코드를 실행을 위해 작성하신 소스코드 폴더로 이동해 주세요.</p><p>아래의 명령으로 gpio_pwm_servo_motor.py를 실행하도록 하겠습니다.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 파이썬을 2.x버전대이신 분은 아래의 명령어를 입력해 주세요.</span></span><br><span class="line">$ sudo python gpio_pwm_servo_motor.py</span><br><span class="line"></span><br><span class="line"><span class="comment"># 파이썬을 3.x버전대이신 분은 아래의 명령어를 입력해 주세요.</span></span><br><span class="line">$ sudo python3 gpio_pwm_servo_motor.py</span><br></pre></td></tr></table></figure><p><img src="008-7.png" alt="image"></p><p>실행을 하시면 서보모터가 움직이는것을 확인 하실수 있습니다.</p><p>프로그램을 종료를 하실려면 Ctrl + C키를 누르면 종료 됩니다.</p><p><a href="https://youtu.be/vklkj--9pDM"><img src="http://img.youtube.com/vi/vklkj--9pDM/0.jpg" alt="AkibaTV"></a></p>]]></content:encoded>
      
      
      <category domain="https://playneko.github.io/categories/Rasberry-Pi/">Rasberry Pi</category>
      
      <category domain="https://playneko.github.io/categories/Rasberry-Pi/Python/">Python</category>
      
      
      <category domain="https://playneko.github.io/tags/Rasberry-Pi/">Rasberry Pi</category>
      
      <category domain="https://playneko.github.io/tags/SSH/">SSH</category>
      
      <category domain="https://playneko.github.io/tags/VNC/">VNC</category>
      
      <category domain="https://playneko.github.io/tags/%E3%83%A9%E3%82%BA%E3%83%99%E3%83%AA%E3%83%BC%E3%83%91%E3%82%A4/">ラズベリーパイ</category>
      
      <category domain="https://playneko.github.io/tags/%EB%9D%BC%EC%A6%88%EB%B2%A0%EB%A6%AC%ED%8C%8C%EC%9D%B4/">라즈베리파이</category>
      
      <category domain="https://playneko.github.io/tags/Servo-Motor/">Servo Motor</category>
      
      <category domain="https://playneko.github.io/tags/GPIO/">GPIO</category>
      
      <category domain="https://playneko.github.io/tags/Python/">Python</category>
      
      <category domain="https://playneko.github.io/tags/%ED%8C%8C%EC%9D%B4%EC%8D%AC/">파이썬</category>
      
      <category domain="https://playneko.github.io/tags/Visual-Studio-Code/">Visual Studio Code</category>
      
      <category domain="https://playneko.github.io/tags/%EB%B9%84%EC%A3%BC%EC%96%BC-%EC%8A%A4%ED%8A%9C%EB%94%94%EC%98%A4-%EC%BD%94%EB%93%9C/">비주얼 스튜디오 코드</category>
      
      <category domain="https://playneko.github.io/tags/%EC%84%9C%EB%B3%B4%EB%AA%A8%ED%84%B0/">서보모터</category>
      
      <category domain="https://playneko.github.io/tags/I2C/">I2C</category>
      
      <category domain="https://playneko.github.io/tags/PCA9685/">PCA9685</category>
      
      <category domain="https://playneko.github.io/tags/PWM/">PWM</category>
      
      <category domain="https://playneko.github.io/tags/PWM%EC%BB%A8%ED%8A%B8%EB%A1%A4%EB%9F%AC/">PWM컨트롤러</category>
      
      <category domain="https://playneko.github.io/tags/%EC%BB%A8%ED%8A%B8%EB%A1%A4%EB%9F%AC/">컨트롤러</category>
      
      
      <comments>https://playneko.github.io/2020/06/11/rasberry-pi-020/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>라즈베리파이에 GPIO, 파이썬으로 FM 라디오방송국 만들기</title>
      <link>https://playneko.github.io/2020/06/06/rasberry-pi-019/</link>
      <guid>https://playneko.github.io/2020/06/06/rasberry-pi-019/</guid>
      <pubDate>Fri, 05 Jun 2020 16:00:00 GMT</pubDate>
      
      <description>&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;라즈베리파이에 GPIO, 파이썬을 이용해 FM 라디오 방송국 만들기&lt;br&gt;이번에 소개할 내용은 라즈베리파이에 GPIO, 파이썬을 이용해 FM Radio 방송국 만들기 입니다.&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<!-- excerpt --><h2 id="라즈베리파이에-GPIO-파이썬을-이용해-FM-라디오-방송국-만들기"><a href="#라즈베리파이에-GPIO-파이썬을-이용해-FM-라디오-방송국-만들기" class="headerlink" title="라즈베리파이에 GPIO, 파이썬을 이용해 FM 라디오 방송국 만들기"></a>라즈베리파이에 GPIO, 파이썬을 이용해 FM 라디오 방송국 만들기</h2><p>안녕하세요.</p><p>이번에 소개할 내용은 라즈베리파이에 GPIO, 파이썬을 이용해 FM Radio 방송국 만들기 입니다.</p><p>오픈소스를 이용해서 설치후 실행만 하시면 바로 라디오 송출이 가능하게 되는것으로</p><p>누구나 쉽고 빠르게 나만의 라디오 방송국을 구축하실수 있습니다.</p><p>나만의 방송국을 쉽게 만들수는 있지만 일단 준비물이 필요하겠습니다.</p><blockquote><h5 id="준비물은-간단하게"><a href="#준비물은-간단하게" class="headerlink" title="준비물은 간단하게"></a>준비물은 간단하게</h5><ul><li>라즈베리파이 OS가 설치된 라즈베리파이</li><li>점퍼케이블 1줄</li><li>라디오</li></ul></blockquote><p>저는 라즈베리파이 제로를 이용해서 설명을 드리겠습니다.</p><p>라디오가 없으면 송출했는지 확인을 할수가 없습니다.</p><p><img src="002-e1590889756380.jpg" alt="image"></p><p><img src="IMG_6627.jpg" alt="image"></p><p><img src="005.jpg" alt="image"></p><p>점퍼케이블을 아래의 표를 보시고 해당하는 위치에 연결을 해주시기 바랍니다.</p><p><img src="RasPiGPIO.png" alt="image"></p><table><thead><tr><th align="center">Pi GPIO Pin</th><th align="center">Notes</th></tr></thead><tbody><tr><td align="center">7</td><td align="center">GPCLK0</td></tr></tbody></table><p>해당하시는 핀에 점퍼케이블을 연결 하셨으면 이제 라디오방송을 할수있는</p><p>오픈소스를 다운로드를 하셔야만 합니다.</p><p>라즈베리파이를 VNC로 접속하시고 터미널을 실행해 주시기 바랍니다.</p><p><img src="001-4.png" alt="image"></p><p>오픈소스를 다운받아서 설치할 경로에 위치를 해주시기 바랍니다.</p><p>저의 경우 /home/pi/Document에 별도의 폴더를 만들어 관리하기 위해 폴더를 추가 하였습니다.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># piRadio 이름으로 디렉토리 생성</span></span><br><span class="line">$ mkdir piRadio</span><br><span class="line"></span><br><span class="line"><span class="comment"># piRadio 디렉토리로 이동</span></span><br><span class="line">$ <span class="built_in">cd</span> piRadio</span><br><span class="line"></span><br><span class="line"><span class="comment"># 디렉토리안의 리스트를 출력 합니다.</span></span><br><span class="line">$ ls -al</span><br></pre></td></tr></table></figure><p><img src="003-3.png" alt="image"></p><p>오픈소스가 wav파일만 가능한 버전과 wav, mp3가 가능한 버전이 있습니다만</p><p>저는 wav, mp3 둘가 가능한 버전으로 소개를 해드리도록 하겠습니다.</p><p>오픈소스를 다운받기 위해 깃허브로 부터 소스를 클론하여 받도록 하겠습니다.</p><p>아래의 명령어를 터미널에 입력해 주세요.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git <span class="built_in">clone</span> https://github.com/Mikael-Jakhelln/PiFMPlay.git</span><br></pre></td></tr></table></figure><p><img src="004-3.png" alt="image"></p><p>다운로드를 시작하시면 파일수가 많습니다만 조금만 기다리시면 다운로드가 되어있는것을 확인하실수 있습니다.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 아래의 명령어를 입력후</span></span><br><span class="line"><span class="comment"># PiFMPlay란 폴더가 생성 된것을 확인할수 있습니다.</span></span><br><span class="line">$ ls -al</span><br><span class="line"></span><br><span class="line"><span class="comment"># PiFMPlay 폴더로 이동을 합니다.</span></span><br><span class="line">$ <span class="built_in">cd</span> PiFMPlay</span><br></pre></td></tr></table></figure><p><img src="006-2.png" alt="image"></p><p>PiFMPlay 폴더로 이동을 하시면 아래와 같은 리스트가 나오게 됩니다.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># .git 폴더, README.md</span></span><br><span class="line"><span class="comment"># pifmplay 폴더가 보입니다.</span></span><br><span class="line"><span class="comment"># 아래의 명령어로 pifmplay폴더로 이동 합니다.</span></span><br><span class="line">$ <span class="built_in">cd</span> pifmplay</span><br></pre></td></tr></table></figure><p><img src="007-2.png" alt="image"></p><p>폴더를 확인하시면 여러가지 샘플용 mp3, wav파일과 파이썬으로 개발된 오픈소스도 보입니다.</p><p><img src="008-2.png" alt="image"></p><p>이제 실행하기전에 아래의 명령어로 실행파일에 권한을 부여를 해주시기 바랍니다.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ chmod +x pifm</span><br><span class="line">$ chmod +x pifmplay</span><br></pre></td></tr></table></figure><p>mp3파일을 재생하면 pifmplay의 경우 ffmpeg라이브러리가 필요로 하기에 우선 라이브러리도 설치 하겠습니다.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo apt-get install ffmpeg sox libsox-fmt-allffmpeg sox libsox-fmt-all</span><br></pre></td></tr></table></figure><p><img src="010-1-1.png" alt="image"></p><p>설치가 끝나셨으면 우선 starwars.wav파일을 송출해 보도록 하겠습니다.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 라디오 주파수는 가지고 계신</span></span><br><span class="line"><span class="comment"># 라디오 주파수에 맞추어서 설정해 주세요.</span></span><br><span class="line">$ sudo ./pifm starwars.wav 98.1</span><br><span class="line"></span><br><span class="line"><span class="comment"># 실행을 종료 하실때는 Ctrl + C키를 입력해 주세요.</span></span><br></pre></td></tr></table></figure><p><img src="011-2.png" alt="image"></p><p>위와같이 실행을 하신후 라디오 주파수를 맞춰 주시면 라디오에서 스타워즈 노래가 나오는것을 확인하실수 있습니다.</p><p>그럼 계속해서 pifmplay를 이용한 mp3파일을 송출을 해보도록 하겠습니다.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo ./pifmplay Porcelain.mp3 98.1</span><br></pre></td></tr></table></figure><p><img src="013-3.png" alt="image"></p><p>위와같이 출력후 라디오와 주파수를 맞춰주시면 mp3 음악이 라디오로 재생되는것을 확인하실수 있습니다.</p><p>이렇게해서 나만의 라디오 방송국을 만드는 방법을 알아보았습니다.</p><p>아래는 실제 라디오로 재생되는 음악파일 입니다.</p><p><a href="https://youtu.be/U7wfQ608Ysw"><img src="http://img.youtube.com/vi/U7wfQ608Ysw/0.jpg" alt="AkibaTV"></a></p><blockquote><h4 id="주의사항"><a href="#주의사항" class="headerlink" title="주의사항"></a>주의사항</h4><ol><li>적합성 평가 : 전파법시행령 25조 국내에서 사용하기 위해서는 적합성 평가를 받은 제품이어야만 합니다.</li><li>출력 : 미래부에서는 ‘신고하지 아니하고 개설할 수 있는 무선국용 무선기기’의 규격을 정해놓고 있으며</li><li>오디오에 해당하는 ‘4. 음성 및 음향신호 전송용 무선기기’는 10mW 이하여야 합니다. </li></ol></blockquote><p>자세한 내용은 아래의 한국전파진흥협회를 참고해 주세요.</p><p><a href="https://www.spectrum.or.kr/">https://www.spectrum.or.kr/</a></p>]]></content:encoded>
      
      
      <category domain="https://playneko.github.io/categories/Rasberry-Pi/">Rasberry Pi</category>
      
      <category domain="https://playneko.github.io/categories/Rasberry-Pi/Python/">Python</category>
      
      
      <category domain="https://playneko.github.io/tags/SSH/">SSH</category>
      
      <category domain="https://playneko.github.io/tags/VNC/">VNC</category>
      
      <category domain="https://playneko.github.io/tags/%E3%83%A9%E3%82%BA%E3%83%99%E3%83%AA%E3%83%BC%E3%83%91%E3%82%A4/">ラズベリーパイ</category>
      
      <category domain="https://playneko.github.io/tags/%EB%9D%BC%EC%A6%88%EB%B2%A0%EB%A6%AC%ED%8C%8C%EC%9D%B4/">라즈베리파이</category>
      
      <category domain="https://playneko.github.io/tags/%EA%B9%83%ED%97%88%EB%B8%8C/">깃허브</category>
      
      <category domain="https://playneko.github.io/tags/e100/">e100</category>
      
      <category domain="https://playneko.github.io/tags/FM/">FM</category>
      
      <category domain="https://playneko.github.io/tags/FM-RADIO/">FM RADIO</category>
      
      <category domain="https://playneko.github.io/tags/gihub/">gihub</category>
      
      <category domain="https://playneko.github.io/tags/iriver/">iriver</category>
      
      <category domain="https://playneko.github.io/tags/mp3/">mp3</category>
      
      <category domain="https://playneko.github.io/tags/RADIO/">RADIO</category>
      
      <category domain="https://playneko.github.io/tags/wav/">wav</category>
      
      <category domain="https://playneko.github.io/tags/YouTube/">YouTube</category>
      
      <category domain="https://playneko.github.io/tags/%EB%9D%BC%EB%94%94%EC%98%A4/">라디오</category>
      
      <category domain="https://playneko.github.io/tags/%EC%98%A4%ED%94%88%EC%86%8C%EC%8A%A4/">오픈소스</category>
      
      <category domain="https://playneko.github.io/tags/%EC%A0%84%ED%8C%8C%EB%B2%95/">전파법</category>
      
      
      <comments>https://playneko.github.io/2020/06/06/rasberry-pi-019/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>라즈베리파이 PHP에서 URL의 Image Download 해보기</title>
      <link>https://playneko.github.io/2020/06/05/rasberry-pi-018/</link>
      <guid>https://playneko.github.io/2020/06/05/rasberry-pi-018/</guid>
      <pubDate>Thu, 04 Jun 2020 16:00:00 GMT</pubDate>
      
      <description>&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;라즈베리파이 PHP에서 URL의 Image Download 해보기&lt;br&gt;이번에 소개할 내용은 라즈베리파이와 PHP에서 URL의 Image Download 해보기 입니다.&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<!-- excerpt --><h2 id="라즈베리파이-PHP에서-URL의-Image-Download-해보기"><a href="#라즈베리파이-PHP에서-URL의-Image-Download-해보기" class="headerlink" title="라즈베리파이 PHP에서 URL의 Image Download 해보기"></a>라즈베리파이 PHP에서 URL의 Image Download 해보기</h2><p>안녕하세요.</p><p>이번에 소개할 내용은 라즈베리파이와 PHP에서 URL의 Image Download 해보기 입니다.</p><p>개인서버 또는 웹호스팅 또는 라즈베리에 웹서버를 설치가 되신상태로 준비를 해주시기 바랍니다.</p><p>웹페이지를 오픈하실 상태가 되셨으면</p><p>그럼 개발을 하기위해서  Visual Studio Code(비주얼 스튜디오 코드)를 실행해 주시기 바랍니다.</p><p><img src="001-3.png" alt="image"></p><p>Visual Studio Code(비주얼 스튜디오 코드)를 실행을 하셨으면</p><p>파일명을 url_image_download1.php 로 지정하시고 파일을 추가해 주시기 바랍니다.</p><p><img src="002-3.png" alt="image"></p><p>코딩에 들어가기 앞서 우선 PHP의 설정을 확인해 주시기 바랍니다.</p><p>우선 라즈베리파이를 VNC로 접속을 하시고 터미널을 실행해 주세요.</p><p><img src="003-2.png" alt="image"></p><p>아래의 명령어를 입력해주시고 PHP설정을 확인 하실수 있습니다.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ vi /etc/php/7.3/fpm/php.ini</span><br></pre></td></tr></table></figure><p><img src="004-2.png" alt="image"></p><p>설정파일이 열리면 852라인까지 이동을 합니다.</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 852라인에 allow_url_fopen의 ; 주석처리를 제거해 주세요.</span><br><span class="line"># 아래처럼 해주셔야만 PHP가 외부 URL의 데이터를 가져오실수가 있습니다.</span><br><span class="line"># 주석이 되어 있거나 Off상태로는 함수가 정상작동을 하지 않습니다.</span><br><span class="line">allow_url_fopen = On</span><br></pre></td></tr></table></figure><p><img src="005-1.png" alt="image"></p><p>설정확인이 되셨으면 vi 에디터를 종료해 주시기 바랍니다.</p><p>그럼 다시 Visual Studio Code(비주얼 스튜디오 코드)로 돌아오셔서</p><p>file_get_contents 함수를 이용해서 아래의 URL의 이미지를 가져오기를 하겠습니다.</p><p><img src="006-1.png" alt="image"></p><p>비주얼 스튜디오 코드에서 아래의 코드를 작성해 주시기 바랍니다.</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    <span class="variable">$img</span> = file_get_contents(<span class="string">&quot;https://pbs.twimg.com/media/DevPZktUYAETTGg.jpg&quot;</span>);</span><br><span class="line">    <span class="variable">$fp</span> = fopen(<span class="string">&quot;./001.jpg&quot;</span>, <span class="string">&quot;w&quot;</span>);</span><br><span class="line">    fwrite(<span class="variable">$fp</span>, <span class="variable">$img</span>);</span><br><span class="line">    fclose(<span class="variable">$fp</span>);</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;OK&quot;</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p><img src="007-1-e1591275930939.png" alt="image"></p><p>저장하신 파일을 웹서버의 루트 경로에 올려주시기 바랍니다.</p><p><img src="008-1.png" alt="image"></p><p>웹브라우져를 실행하신후 http://아이피주소 또는 도메인/url_image_download1.php 를 입력해 주세요.</p><p><img src="010-1.png" alt="image"></p><p>OK가 출력이 되셨으면 파일이 저장이 되었는지 확인해 보도록 하겠습니다.</p><p><img src="011-1.png" alt="image"></p><p>001.jpg 파일명을 다운로드가 된것을 확인이 되었습니다.</p><p>이번에는 fopen 함수를 이용한 다운로드를 해보도록 하겠습니다.</p><p>fopen도 file_get_contents와 사용법이 비슷해서 크게 어렵지 않게 사용하실수 있습니다.</p><p>그러면 비주얼 스튜디오를 실행을 해주시고 파일명을 url_image_download2.php 로 지정하시고 파일을 추가해 주시기 바랍니다.</p><p>아래와 같이 코딩을 해주시기 바랍니다.</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    <span class="variable">$rf</span> = fopen(<span class="string">&quot;https://i.pinimg.com/474x/e7/6b/2e/e76b2ed4803bbe7c5f82d6967acb3298.jpg&quot;</span>, <span class="string">&quot;r&quot;</span>);</span><br><span class="line">    <span class="variable">$fp</span> = fopen(<span class="string">&quot;./002.jpg&quot;</span>, <span class="string">&quot;w&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (!feof(<span class="variable">$rf</span>)) &#123;</span><br><span class="line">        fwrite(<span class="variable">$fp</span>, fread(<span class="variable">$rf</span>, <span class="number">1</span>), <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    fclose(<span class="variable">$rf</span>);</span><br><span class="line">    fclose(<span class="variable">$fp</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;OK&quot;</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p><img src="012-1.png" alt="image"></p><p>이번에 다운로드할 이미지는 아래와 같습니다.</p><p><img src="013-2.png" alt="image"></p><p>작성하신 소스파일을 웹서버에 올려주시기 바랍니다.</p><p><img src="014-1.png" alt="image"></p><p>파일을 올려주셨으면 이제 웹브라우져를 실행하신후 http://아이피주소 또는 도메인/url_image_download2.php 를 입력해 주세요.</p><p><img src="016-1.png" alt="image"></p><p>002.jpg파일명으로 정상적으로 다운로드 된것을 확인하실수 있습니다.</p><p>이렇게 해서 PHP를 이용한 외부 사이트의 이미지를 다운로드 하는 방법을 알아보았습니다만</p><p>만일 allow_url_fopen를 수정하기 어려우신 경우 다른방법으로 다운로드 하는 방법을 알려드리도록 하겠습니다.</p><p>이방법은 소스가 조금 길어지기는 하지만 거의 확실하게 받으실수 있겠습니다.</p><p>그러면 비주얼 스튜디오를 실행을 해주시고 파일명을 url_image_download3.php 로 지정하시고 파일을 추가해 주시기 바랍니다.</p><p>아래와 같이 코딩을 해주시기 바랍니다.</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    <span class="variable">$fp</span> = fopen(<span class="string">&quot;./003.jpg&quot;</span>, <span class="string">&quot;w&quot;</span>);</span><br><span class="line">    <span class="variable">$ch</span> = curl_init();</span><br><span class="line">    curl_setopt(<span class="variable">$ch</span>, CURLOPT_URL, <span class="string">&quot;https://pbs.twimg.com/media/ETcYpHbUEAIs9tF.jpg&quot;</span>);</span><br><span class="line">    curl_setopt(<span class="variable">$ch</span>, CURLOPT_HEADER, <span class="number">0</span>);</span><br><span class="line">    curl_setopt(<span class="variable">$ch</span>, CURLOPT_RETURNTRANSFER, <span class="number">1</span>);</span><br><span class="line">    curl_setopt(<span class="variable">$ch</span>, CURLOPT_USERAGENT, <span class="string">&quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/83.0.4103.61 Safari/537.36&quot;</span>);</span><br><span class="line">    curl_setopt(<span class="variable">$ch</span>, CURLOPT_FILE, <span class="variable">$fp</span>);</span><br><span class="line">    curl_exec(<span class="variable">$ch</span>);</span><br><span class="line">    fclose(<span class="variable">$fp</span>);</span><br><span class="line">    curl_close(<span class="variable">$ch</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;OK&quot;</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p><img src="017-1.png" alt="image"></p><p>이번에 다운로드할 이미지는 아래와 같습니다.</p><p><img src="018-1.png" alt="image"></p><p>작성하신 소스파일을 웹서버에 올려주시기 바랍니다.</p><p><img src="019-1.png" alt="image"></p><p>파일을 올려주셨으면 이제 웹브라우져를 실행하신후 http://아이피주소 또는 도메인/url_image_download3.php 를 입력해 주세요.</p><p><img src="020-1.png" alt="image"></p><p>003.jpg파일명으로 정상적으로 다운로드 된것을 확인하실수 있습니다.</p>]]></content:encoded>
      
      
      <category domain="https://playneko.github.io/categories/Rasberry-Pi/">Rasberry Pi</category>
      
      <category domain="https://playneko.github.io/categories/Rasberry-Pi/PHP/">PHP</category>
      
      
      <category domain="https://playneko.github.io/tags/SSH/">SSH</category>
      
      <category domain="https://playneko.github.io/tags/VNC/">VNC</category>
      
      <category domain="https://playneko.github.io/tags/%E3%83%A9%E3%82%BA%E3%83%99%E3%83%AA%E3%83%BC%E3%83%91%E3%82%A4/">ラズベリーパイ</category>
      
      <category domain="https://playneko.github.io/tags/%EB%9D%BC%EC%A6%88%EB%B2%A0%EB%A6%AC%ED%8C%8C%EC%9D%B4/">라즈베리파이</category>
      
      <category domain="https://playneko.github.io/tags/Visual-Studio-Code/">Visual Studio Code</category>
      
      <category domain="https://playneko.github.io/tags/%EB%B9%84%EC%A3%BC%EC%96%BC-%EC%8A%A4%ED%8A%9C%EB%94%94%EC%98%A4-%EC%BD%94%EB%93%9C/">비주얼 스튜디오 코드</category>
      
      <category domain="https://playneko.github.io/tags/PHP/">PHP</category>
      
      <category domain="https://playneko.github.io/tags/download/">download</category>
      
      <category domain="https://playneko.github.io/tags/http/">http</category>
      
      <category domain="https://playneko.github.io/tags/image/">image</category>
      
      <category domain="https://playneko.github.io/tags/Image-Download/">Image Download</category>
      
      <category domain="https://playneko.github.io/tags/%EC%86%8C%EC%8A%A4%EC%BD%94%EB%93%9C/">소스코드</category>
      
      <category domain="https://playneko.github.io/tags/%EC%9B%B9%ED%8E%98%EC%9D%B4%EC%A7%80/">웹페이지</category>
      
      <category domain="https://playneko.github.io/tags/%ED%81%AC%EB%A1%A4%EB%A7%81/">크롤링</category>
      
      
      <comments>https://playneko.github.io/2020/06/05/rasberry-pi-018/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>라즈베리파이에서 NPM (Nginx + PHP + MariaDB) 설치하기</title>
      <link>https://playneko.github.io/2020/06/04/rasberry-pi-017/</link>
      <guid>https://playneko.github.io/2020/06/04/rasberry-pi-017/</guid>
      <pubDate>Wed, 03 Jun 2020 16:00:00 GMT</pubDate>
      
      <description>&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;라즈베리파이 또는 리눅스에서 NPM (Nginx + PHP + MariaDB) 설치하기&lt;br&gt;이번에 소개할 내용은 라즈베리파이 또는 리눅스에서 NPM (Nginx + PHP + MariaDB) 설치하기 입니다.&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<!-- excerpt --><h2 id="라즈베리파이-또는-리눅스에서-NPM-Nginx-PHP-MariaDB-설치하기"><a href="#라즈베리파이-또는-리눅스에서-NPM-Nginx-PHP-MariaDB-설치하기" class="headerlink" title="라즈베리파이 또는 리눅스에서 NPM (Nginx + PHP + MariaDB) 설치하기"></a>라즈베리파이 또는 리눅스에서 NPM (Nginx + PHP + MariaDB) 설치하기</h2><p>안녕하세요.</p><p>이번에 소개할 내용은 라즈베리파이 또는 리눅스에서 NPM (Nginx + PHP + MariaDB) 설치하기 입니다.</p><p>그리고 저는 라즈베리파이를 이용해서 설치를 하겠습니다.</p><p>많은 분들이 저렴한 가격으로 홈 웹서버를 구축할수 있게 따라만 하시면</p><p>누구나 다 웹서버를 구축하실수 있습니다.</p><p>우선 준비물이 필요 합니다.</p><blockquote><h4 id="준비물"><a href="#준비물" class="headerlink" title="준비물"></a>준비물</h4><p>라즈베리파이 가장싼 제로도 가능 합니다.<br>저는 이번에 660엔(약 7천원)짜리 Raspberry Pi Zero v1.3을 이용해서 설명을 드립니다.</p></blockquote><p>라즈베리파이 제로 1.3에 대해 간략하게 설명을 드리면</p><p>우선 싱글코어에 512램 그리고 끝입니다. 모니터에 연결을 할수있게 HDMI는 지원합니다.</p><p>블루투스나 와이파이 유선랜이 기본적으로 제공되지 않기때문에 별도 모듈을 구매 하셔야만 합니다.</p><p>거기다 GPIO를 이용하실려면 별도의 핀소켓도 구매하신후 납땜을 해주셔야만 합니다.</p><p><img src="001-2-e1591186183705.png" alt="image"></p><p><img src="001_1.png" alt="image"></p><p>싱글코어이다보니 초기 세팅에 시간이 많이 소요가 되었습니다.</p><p>테스트용으로 사용하실게 아니면 별로 추천을 안드리겠습니다.</p><p>그래서 이제부터 NPM 구축하는 방법을 설명해 드리도록 하겠습니다.</p><p>우선 VNC로 라즈베리파이에 접속을 해주시고 터미널을 실행해 주세요.</p><p><img src="002-2.png" alt="image"></p><p>터미널을 실행이 되셨으면 아래의 명령어를 차례대로 입력해 주시기 바랍니다.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ sudo apt update</span><br><span class="line">$ sudo apt upgrade</span><br><span class="line">$ sudo apt dist-upgrade</span><br></pre></td></tr></table></figure><p><img src="004-1.png" alt="image"></p><p><img src="005.png" alt="image"></p><p><img src="006.png" alt="image"></p><p>이렇게 해서 APT를 최신상태로 갱신이 완료 되었습니다.</p><p>만일 최신버전이 있을경우가 있기때문에 APT로 프로그램을 설치하실 경우 우선 최신으로 갱신을 해주시기 바랍니다.</p><p>이제 본격적으로 Nginx를 설치를 하도록 하겠습니다. 아래의 명령어를 입력해 주세요.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ sudo apt-get install nginx</span><br><span class="line">$ sudo service nginx start</span><br></pre></td></tr></table></figure><p><img src="007.png" alt="image"></p><p>Nginx설치가 완료 되었습니다.</p><p>Nginx서버를 시작만 하면 됩니다.</p><p><img src="008.png" alt="image"></p><p>처음 Nginx를 설치하시면 웹사이트 디렉토리가 /var/www/html 로 설정되어 있습니다.</p><p>그래서 그대로 사용하실분은 설정을 하지 않으셔도 됩니다만</p><p>만일 삼바를 설치하신 분들은 삼바 디렉토리 설정을 별도로 하지 않으신경우 /var/www/html 경로까지 권한문제로 이동을 하실수 없습니다.</p><p>그렇기에 기본 디렉토리를 변경해 주도록 하겠습니다.</p><p>설정을 변경하기 전에 www 폴더를 만들어 주도록 하겠습니다.</p><p>저는 /home밑에 www 폴더를 만들겠습니다.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo mkdir www</span><br></pre></td></tr></table></figure><p><img src="009.png" alt="image"></p><p>폴더를 만드시고 리스트를 출력하시게 되면 폴더의 사용자와 그룹이 root로 되어있는것을 보실수 있습니다.</p><p>root를 pi계정이 읽고 쓰기가 가능하도록 권한자를 변경하도록 하겠습니다.</p><p><img src="010.png" alt="image"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo chown pi:pi ./www</span><br></pre></td></tr></table></figure><p>명령어를 입력하시면 폴더의 권한자와 그룹이 pi로 변경되신것을 확인 하실수 있습니다.</p><p><img src="012.png" alt="image"></p><p>이제 Nginx의 설정을 변경하도록 하겠습니다.</p><p>그전에 www폴더까지의 절대패스를 확인 합니다.</p><p><img src="013-1.png" alt="image"></p><p>아래의 명령어를 입력해 주세요.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo vi /etc/nginx/sites-available/default</span><br></pre></td></tr></table></figure><p><img src="014.png" alt="image"></p><p><img src="015.png" alt="image"></p><p>중간쯤 스크롤을 내리다 보시면</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">root /var/www/html; 부분이 보이게 됩니다. 이부분을 아래와 같이 입력해 주세요.</span><br><span class="line"></span><br><span class="line"># root /var/www/html;</span><br><span class="line">root /home/www;</span><br><span class="line"></span><br><span class="line">PHP도 설치를 해야하기때문에 밑에쪽 줄부분도 같이 수정을 해주세요.</span><br><span class="line">index index.html index.htm index.nginx-debian.html index.php;</span><br><span class="line"></span><br><span class="line">작성이 다 끝나셨으면 :<span class="keyword">wq</span> 를 하시고 저장장과 동시에 빠져나오기</span><br></pre></td></tr></table></figure><p><img src="016.png" alt="image"></p><p>저장을 하시고 vi에디터에서 나오시면 되겠습니다.</p><p>설정정보를 반영을 해야하기때문에 Nginx서버를 재기동 합니다.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo service nginx restart</span><br></pre></td></tr></table></figure><p><img src="017.png" alt="image"></p><p>일단 Nginx서버가 제대로 설치가 되었는지 일단 라즈베리파이 아이피를 브라우저에 입력해서 접속을 해보시면</p><p>기본페이지를 올려둔게 없는 관계로 아래와 같이 표시가 되면 제대로 된것 입니다.</p><p><img src="018-e1591189523396.png" alt="image"></p><p>이제부터 PHP를 설치를 하도록 하겠습니다.</p><p>아래의 명령어를 차례대로 입력해 주시기 바랍니다.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 설치전에 갱신을 한번 합니다. -y는 예/아니오를</span></span><br><span class="line"><span class="comment"># 물어보는게 나올경우 자동으로 Yes로 선택해 줍니다.</span></span><br><span class="line">$ sudo apt-get update -y</span><br><span class="line"></span><br><span class="line"><span class="comment"># PHP가 7버전대에서 가장 최신버전의 파일 리스트를</span></span><br><span class="line"><span class="comment"># 모조리 가져와서 보여주는 명령어 입니다.</span></span><br><span class="line">$ sudo apt list php7*</span><br><span class="line"></span><br><span class="line"><span class="comment"># PHP설치시 가장 많이 사용하는 패키지를 한꺼번에 설치하도록 하겠습니다.</span></span><br><span class="line">$ sudo apt-get install php7.3 php7.3-cli php7.3-common php7.3-fpm php7.3-gd php7.3-json php7.3-mysql php7.3-readline -y</span><br></pre></td></tr></table></figure><p><img src="019.png" alt="image"></p><p><img src="020.png" alt="image"></p><p><img src="021.png" alt="image"></p><p><img src="022.png" alt="image"></p><p>이렇게 해서 PHP설치가 완료 되었습니다만 Nginx에서 추가설정을 하셔야만 합니다.</p><p>아래의 명령어를 입력해 주세요.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo vi /etc/nginx/sites-available/default</span><br></pre></td></tr></table></figure><p><img src="023.png" alt="image"></p><p><img src="024.png" alt="image"></p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">location ~ \.php$ 부분이 나오는곳이 보이시면 아래와 같이 #을 제거를 해주시기 바랍니다.</span><br><span class="line"></span><br><span class="line">추가로 location ~ /\.ht 부분의 #도 같이 제거를 해주시기 바랍니다.</span><br></pre></td></tr></table></figure><p><img src="025.png" alt="image"></p><p>주석을 다 제거를 해주셨으면 아래와 같이 :wq 명령어를 입력후 저장후 빠져나오시기 바랍니다.</p><p><img src="026.png" alt="image"></p><p>아래의 명령어를 입력하여 Nginx서버를 재기동을 합니다.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo service nginx restart</span><br></pre></td></tr></table></figure><p>이제 PHP설치와 기본설정이 끝났기에 이젠 PHP가 정상설치 되었는지 확인해 보도록 하겠습니다.</p><p>아래의 명령어를 차례대로 입력해 주시기 바랍니다.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 각자 설정하신 루트 디렉토리를 이동해 주세요.</span></span><br><span class="line">$ <span class="built_in">cd</span> /home/www</span><br><span class="line"></span><br><span class="line"><span class="comment"># 간단하게 PHP 정보를 출력해줄 페이지를 하나 작성 합니다.</span></span><br><span class="line">$ vi info.php</span><br></pre></td></tr></table></figure><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># <span class="keyword">vi</span> 에디터가 열리시면 아래의 문장을 입력해 주세요.</span><br><span class="line">&lt;?php phpinfo(); ?&gt;</span><br><span class="line"></span><br><span class="line"># 저장후 나옵니다.</span><br><span class="line">:<span class="keyword">wq</span></span><br></pre></td></tr></table></figure><p><img src="028.png" alt="image"></p><p><img src="029.png" alt="image"></p><p>이제 다시 브라우져를 여시고 라즈베리파이 아이피 + /info.php를 브라우저에 입력해서 접속을 해주시기 바랍니다.</p><p>아래와 같은 화면이 나오시면 PHP가 정상설치 되셨습니다.</p><p><img src="030-972x1024.png" alt="image"></p><p>이젠 MariaDB를 설치하도록 하겠습니다.</p><p>원래 MySQL이었지만 오라클이 MySQL을 인수하면서 MySQL개발하신 분께서 기존 엔진을 가지고</p><p>새로만든 DB가 MariaDB입니다.</p><p>그럼 아래의 명령어를 입력해 주세요.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ sudo apt-get install mariadb-server</span><br><span class="line"></span><br><span class="line"><span class="comment">#설치 완료후 mariaDB 암호 재설정하기</span></span><br><span class="line">$ sudo mysql -uroot mysql</span><br><span class="line">update user <span class="built_in">set</span> password=password(<span class="string">&#x27;새암호입력&#x27;</span>) <span class="built_in">where</span> user=<span class="string">&#x27;root&#x27;</span>;</span><br><span class="line">flush privileges;</span><br><span class="line">quit;</span><br></pre></td></tr></table></figure><p><img src="031.png" alt="image"></p><p><img src="033_1.png" alt="image"></p><p>여기까지가 NPM 구축하기가 끝났습니다.</p><p>덤으로 phpMyAdmin을 설치해서 디비를 좀더 편하게 관리할수 있도록 하겠습니다.</p><p>아래의 명령어를 입력해 주세요.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo apt-get install phpmyadmin</span><br></pre></td></tr></table></figure><p><img src="034.png" alt="image"></p><p>설치하는 도중에 갑자기 이런 화면이 나오게 되시면 일단 둘다 설치한게 없기에 그냥 넘기시면 됩니다.</p><p><img src="035_1.png" alt="image"></p><p>아래와 같은 화면이 다시 등장하시면 여기서도 아니오를 해주시기 바랍니다.</p><p><img src="036.png" alt="image"></p><p>phpMyAdmin설치가 끝났습니다.</p><p><img src="037.png" alt="image"></p><p>그럼 아래의 명령어를 입력해서 홈페이지의 루트 디렉토리에서 phpMyAdmin 페이지에 접속할수 있게 해줍니다.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># /home/www 디렉토리에 심볼릭 링크로 phpMyAdmin을 연결시킵니다.</span></span><br><span class="line">$ sudo ln -s /usr/share/phpmyadmin /home/www</span><br><span class="line">$ ls -al</span><br></pre></td></tr></table></figure><p><img src="038.png" alt="image"></p><p>심볼릭 링크가 정상적으로 연결된것을 확인 하실수 있습니다.</p><p>이제 phpMyAdmin을 정상으로 뜨는지 해보도록 하겠습니다.</p><p>브라우저를 실행하신후 http://아이피주소/phpmyadmin 주소를 입력해 주세요.</p><p><img src="039-972x1024.png" alt="image"></p><p>정상적으로 phpMyAdmin이 열린것을 확인 되었습니다.</p><p>이것으로 NPM (Nginx + PHP + MariaDB) 설치하기가 완료 되었습니다.</p>]]></content:encoded>
      
      
      <category domain="https://playneko.github.io/categories/Rasberry-Pi/">Rasberry Pi</category>
      
      <category domain="https://playneko.github.io/categories/Rasberry-Pi/Linux/">Linux</category>
      
      <category domain="https://playneko.github.io/categories/Rasberry-Pi/Linux/PHP/">PHP</category>
      
      
      <category domain="https://playneko.github.io/tags/Rasberry-Pi/">Rasberry Pi</category>
      
      <category domain="https://playneko.github.io/tags/SSH/">SSH</category>
      
      <category domain="https://playneko.github.io/tags/VNC/">VNC</category>
      
      <category domain="https://playneko.github.io/tags/%E3%83%A9%E3%82%BA%E3%83%99%E3%83%AA%E3%83%BC%E3%83%91%E3%82%A4/">ラズベリーパイ</category>
      
      <category domain="https://playneko.github.io/tags/%EB%9D%BC%EC%A6%88%EB%B2%A0%EB%A6%AC%ED%8C%8C%EC%9D%B4/">라즈베리파이</category>
      
      <category domain="https://playneko.github.io/tags/server/">server</category>
      
      <category domain="https://playneko.github.io/tags/nginx/">nginx</category>
      
      <category domain="https://playneko.github.io/tags/link/">link</category>
      
      <category domain="https://playneko.github.io/tags/apache/">apache</category>
      
      <category domain="https://playneko.github.io/tags/apt/">apt</category>
      
      <category domain="https://playneko.github.io/tags/chown/">chown</category>
      
      <category domain="https://playneko.github.io/tags/MariaDB/">MariaDB</category>
      
      <category domain="https://playneko.github.io/tags/mkdir/">mkdir</category>
      
      <category domain="https://playneko.github.io/tags/mysql/">mysql</category>
      
      <category domain="https://playneko.github.io/tags/NPM/">NPM</category>
      
      <category domain="https://playneko.github.io/tags/PHP/">PHP</category>
      
      <category domain="https://playneko.github.io/tags/phpinfo/">phpinfo</category>
      
      <category domain="https://playneko.github.io/tags/phpMyAdmin/">phpMyAdmin</category>
      
      <category domain="https://playneko.github.io/tags/root/">root</category>
      
      <category domain="https://playneko.github.io/tags/sites/">sites</category>
      
      <category domain="https://playneko.github.io/tags/zero/">zero</category>
      
      <category domain="https://playneko.github.io/tags/%EC%8B%AC%EB%B3%BC%EB%A6%AD-%EB%A7%81%ED%81%AC/">심볼릭 링크</category>
      
      
      <comments>https://playneko.github.io/2020/06/04/rasberry-pi-017/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>라즈베리파이와 Python으로 Servo Motor 제어하기</title>
      <link>https://playneko.github.io/2020/06/01/rasberry-pi-016/</link>
      <guid>https://playneko.github.io/2020/06/01/rasberry-pi-016/</guid>
      <pubDate>Sun, 31 May 2020 16:00:00 GMT</pubDate>
      
      <description>&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;라즈베리파이에 GPIO와 Python으로 Servo Motor 제어하기&lt;br&gt;이번에 소개할 내용은 라즈베리파이에 GPIO를 파이선을 이용해서 Servo Motor(서보모터) 제어하기 입니다.&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<!-- excerpt --><h2 id="라즈베리파이에-GPIO와-Python으로-Servo-Motor-제어하기"><a href="#라즈베리파이에-GPIO와-Python으로-Servo-Motor-제어하기" class="headerlink" title="라즈베리파이에 GPIO와 Python으로 Servo Motor 제어하기"></a>라즈베리파이에 GPIO와 Python으로 Servo Motor 제어하기</h2><p>안녕하세요.</p><p>이번에 소개할 내용은 라즈베리파이에 GPIO를 파이선을 이용해서 Servo Motor(서보모터) 제어하기 입니다.</p><blockquote><h5 id="우선-준비물이-필요-합니다"><a href="#우선-준비물이-필요-합니다" class="headerlink" title="우선 준비물이 필요 합니다."></a>우선 준비물이 필요 합니다.</h5><p>라즈베리파이 본체 OS설치와 Python설치가 끝난 상태<br>저의 경우는 라즈베리파이 제로를 이용해서 테스트를 했습니다.</p><ul><li>Servo Motor(서보모터)</li><li>점퍼와이어 암,수가 있는걸로 합니다. (3줄필요)</li></ul></blockquote><p>이렇게 준비물이 갖춰져 있는지 확인 하시고 본격적으로 Servo Motor(서보모터) 제어하기를 하겠습니다.</p><p><img src="001-1.jpg" alt="image"></p><p>서보모터를 구매하시면 어떤게 시그널이고 어떤게 전압이고 어떤게 GND인지 구분을하기 어렵습니다.</p><p>가장 알기 쉬운것은 무조건 빨간색 또는 가운데선이 전압을 넣어주는 선 입니다.</p><p>제가 사용하는 서보모터의 색깔별 구성은 아래의 표를 참고해 주세요.</p><table><thead><tr><th align="center">Color</th><th align="center">Pi GPIO Pin</th><th align="center">Notes</th></tr></thead><tbody><tr><td align="center">White</td><td align="center">12</td><td align="center">18(PWM)</td></tr><tr><td align="center">RED</td><td align="center">2</td><td align="center">5V</td></tr><tr><td align="center">Black</td><td align="center">14</td><td align="center">GND</td></tr></tbody></table><p>서보모터를 사용하실때는 전압이 5V에 점퍼를 연결하는걸 추천드립니다.</p><p>3.3V로도 가능은 하지만 회전력과 파워가 한참 떨어집니다.</p><p>GPIO핀에 대한 자세한 내용을 원하시는 분은 아래의 링크를 들어가셔서 참고해 주세요.</p><p><a href="https://playneko.github.io/2020/05/28/rasberry-pi-010/">라즈베리파이에서 GPIO를 사용하기전 알아두어야 할 사항</a></p><p>서보모터를 구동하기 위해선 우선 코딩을 하셔야만 합니다.</p><p>이번부터는 메모장으로 코딩을 하지않고 Visual Studio Code(비주얼 스튜디오 코드)를 이용해서 하겠습니다.</p><p>설치가 안되어 있으신 분들은 미리 설치를 해주시기 바랍니다.</p><p><img src="001_1-1.png" alt="image"></p><p>실행하시고 기존에 사용했던 작업폴더를 추가해 주시기 바랍니다.</p><p>그리고 서보모터 관련해서 파일명을 gpio_servo_motor.py로 파일을 하나 추가해 주시기 바랍니다.</p><p>간단한 예제로 서보모터가 잘 돌아가는지 확인하는 코드를 작성해 보도록 하겠습니다.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> RPi.GPIO <span class="keyword">as</span> GPIO</span><br><span class="line"></span><br><span class="line">print(<span class="string">&quot;AkibaTV Servo Motor Test&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># White : Pin 12 : 18(PWM)</span></span><br><span class="line"><span class="comment"># RED   : Pin 2  : 5v</span></span><br><span class="line"><span class="comment"># Black : Pin 14 : GND</span></span><br><span class="line">GPIO.setmode(GPIO.BCM)</span><br><span class="line">GPIO.setup(<span class="number">18</span>, GPIO.OUT)</span><br><span class="line"></span><br><span class="line">phz = GPIO.PWM(<span class="number">18</span>, <span class="number">50</span>) <span class="comment"># 18Pin, 50hz</span></span><br><span class="line">phz.start(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 루프가 3번을 반복하면서 모터를 돌리게끔 설정</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="number">3</span>):</span><br><span class="line">    print(<span class="string">&quot;10&quot;</span>);</span><br><span class="line">    phz.ChangeDutyCycle(<span class="number">10</span>)</span><br><span class="line">    time.sleep(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">    print(<span class="string">&quot;20.5&quot;</span>);</span><br><span class="line">    phz.ChangeDutyCycle(<span class="number">20.5</span>)</span><br><span class="line">    time.sleep(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">    print(<span class="string">&quot;5&quot;</span>);</span><br><span class="line">    phz.ChangeDutyCycle(<span class="number">5</span>)</span><br><span class="line">    time.sleep(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">    print(<span class="string">&quot;30&quot;</span>);</span><br><span class="line">    phz.ChangeDutyCycle(<span class="number">30</span>)</span><br><span class="line">    time.sleep(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">    print(<span class="string">&quot;7.5&quot;</span>);</span><br><span class="line">    phz.ChangeDutyCycle(<span class="number">7.5</span>)</span><br><span class="line">    time.sleep(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">print(<span class="string">&quot;AkibaTV Servo Motor End&quot;</span>)</span><br><span class="line">GPIO.cleanup()</span><br></pre></td></tr></table></figure><p><img src="002_2.png" alt="image"></p><p>3번의 루프가 돌아가면서 2초마다 5번의 지정된 수치만큼 회전을 하게되는 코딩을 해보았습니다.</p><p>실제로 동작을 확인하기 위해서 라즈베리파이에 삼바를 통해 적당한 위치에 소스파일을 넣어주시기 바랍니다.</p><p>라즈베리파이를 VNC로 접속후 소스파일을 넣어주신 경로까지 이동해 주시기 바랍니다.</p><p><img src="003-11.png" alt="image"></p><p>위와같이 작성한 서보모터 파이선 소스파일이 있는것을 확인하실수 있습니다.</p><p>이제 이것을 실행을 해보도록 하겠습니다.</p><p>파이선을 2.x버전대를 사용하시는 분들은 아래의 명령어를 입력해 주시기 바랍니다.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo python ./gpio_servo_motor.py</span><br></pre></td></tr></table></figure><p>파이선을 3.x버전대를 사용하시는 분들은 아래의 명령어를 입력해 주시기 바랍니다.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo python3 ./gpio_servo_motor.py</span><br></pre></td></tr></table></figure><p>저의경우는 파이선 3.x버전대를 사용하기때문에 3버전대 명령어로 진행 하겠습니다.</p><p><img src="004-9.png" alt="image"></p><p><a href="https://youtu.be/QiT1bXrTlro"><img src="http://img.youtube.com/vi/QiT1bXrTlro/0.jpg" alt="AkibaTV"></a></p><p>실행을 하게되면 3번의 루프가 돌면서 서보모터가 회전된것을 보시게 되셨을겁니다.</p><p>이번에는 랜덤으로 무한루프를 돌려서 서보모터를 회전시키는 예제를 해보도록 하겠습니다.</p><p>Visual Studio Code(비주얼 스튜디오 코드)에서 파일명을 gpio_servo_motor2.py로 해서 추가를 해주시기 바랍니다.</p><p>추가를 하셨으면 아래와 같이 소스코드를 작성해 주시기 바랍니다.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> RPi.GPIO <span class="keyword">as</span> GPIO</span><br><span class="line"></span><br><span class="line">print(<span class="string">&quot;Servo Motor Test&quot;</span>)</span><br><span class="line">print(<span class="string">&quot;Stop is Keyboard Ctrl + C&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># White : Pin 12 : 18(PWM)</span></span><br><span class="line"><span class="comment"># RED   : Pin 2  : 5v</span></span><br><span class="line"><span class="comment"># Black : Pin 14 : GND</span></span><br><span class="line">GPIO.setmode(GPIO.BCM)</span><br><span class="line">GPIO.setup(<span class="number">18</span>, GPIO.OUT)</span><br><span class="line"></span><br><span class="line">phz = GPIO.PWM(<span class="number">18</span>, <span class="number">100</span>)</span><br><span class="line">phz.start(<span class="number">5</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    <span class="comment"># 0부터 180까지의 랜덤숫자</span></span><br><span class="line">    angle = random.randrange(<span class="number">0</span>, <span class="number">180</span>)</span><br><span class="line">    duty = <span class="built_in">float</span>(angle) / <span class="number">10.0</span> + <span class="number">2.5</span></span><br><span class="line">    phz.ChangeDutyCycle(duty)</span><br><span class="line">    time.sleep(<span class="number">0.5</span>)</span><br><span class="line"></span><br><span class="line">print(<span class="string">&quot;Servo Motor End&quot;</span>)</span><br><span class="line">GPIO.cleanup()</span><br></pre></td></tr></table></figure><p><img src="005-9.png" alt="image"></p><p>작성이 되셨으면 소스파일을 라즈베리파이에 배치를 해주시기 바랍니다.</p><p><img src="006-8.png" alt="image"></p><p>파이선을 2.x버전대를 사용하시는 분들은 아래의 명령어를 입력해 주시기 바랍니다.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo python ./gpio_servo_motor2.py</span><br></pre></td></tr></table></figure><p>파이선을 3.x버전대를 사용하시는 분들은 아래의 명령어를 입력해 주시기 바랍니다.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo python3 ./gpio_servo_motor2.py</span><br></pre></td></tr></table></figure><p>명령어를 치시고 실행을 하시게 되면 무한반복으로 서보모터가 돌아가는것을 확인 하실수 있습니다.</p><p>프로그램을 도중에 멈추시기 위해선 Ctrl + C키를 눌러주시면 프로그램이 강제 종료가 됩니다.</p><p><img src="007-8.png" alt="image"></p><p><a href="https://youtu.be/gyUVgh5Rc4g"><img src="http://img.youtube.com/vi/gyUVgh5Rc4g/0.jpg" alt="AkibaTV"></a></p><p>이렇게해서 라즈베리파이에서 서보모터 제어하기를 해보았습니다.</p><p>서보모터를 좀더 응용을 하시게 되면 여러가지 제어하는 기술을 만드실수 있게 되겠습니다.</p>]]></content:encoded>
      
      
      <category domain="https://playneko.github.io/categories/Rasberry-Pi/">Rasberry Pi</category>
      
      <category domain="https://playneko.github.io/categories/Rasberry-Pi/Python/">Python</category>
      
      
      <category domain="https://playneko.github.io/tags/Rasberry-Pi/">Rasberry Pi</category>
      
      <category domain="https://playneko.github.io/tags/SSH/">SSH</category>
      
      <category domain="https://playneko.github.io/tags/VNC/">VNC</category>
      
      <category domain="https://playneko.github.io/tags/%E3%83%A9%E3%82%BA%E3%83%99%E3%83%AA%E3%83%BC%E3%83%91%E3%82%A4/">ラズベリーパイ</category>
      
      <category domain="https://playneko.github.io/tags/%EB%9D%BC%EC%A6%88%EB%B2%A0%EB%A6%AC%ED%8C%8C%EC%9D%B4/">라즈베리파이</category>
      
      <category domain="https://playneko.github.io/tags/Servo-Motor/">Servo Motor</category>
      
      <category domain="https://playneko.github.io/tags/GPIO/">GPIO</category>
      
      <category domain="https://playneko.github.io/tags/Python/">Python</category>
      
      <category domain="https://playneko.github.io/tags/%ED%8C%8C%EC%9D%B4%EC%8D%AC/">파이썬</category>
      
      <category domain="https://playneko.github.io/tags/Visual-Studio-Code/">Visual Studio Code</category>
      
      <category domain="https://playneko.github.io/tags/%EB%B9%84%EC%A3%BC%EC%96%BC-%EC%8A%A4%ED%8A%9C%EB%94%94%EC%98%A4-%EC%BD%94%EB%93%9C/">비주얼 스튜디오 코드</category>
      
      <category domain="https://playneko.github.io/tags/%EC%84%9C%EB%B3%B4%EB%AA%A8%ED%84%B0/">서보모터</category>
      
      
      <comments>https://playneko.github.io/2020/06/01/rasberry-pi-016/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>라즈베리파이 파이썬 기본버전을 최신버전으로 변경하기</title>
      <link>https://playneko.github.io/2020/05/31/rasberry-pi-015/</link>
      <guid>https://playneko.github.io/2020/05/31/rasberry-pi-015/</guid>
      <pubDate>Sat, 30 May 2020 17:00:00 GMT</pubDate>
      
      <description>&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;라즈베리파이 파이썬 기본버전을 최신버전으로 변경하기&lt;br&gt;이번에 소개할 내용은 라즈베리파이를 설치후 파이썬을 설치했습니다만….&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<!-- excerpt --><h2 id="라즈베리파이-파이썬-기본버전을-최신버전으로-변경하기"><a href="#라즈베리파이-파이썬-기본버전을-최신버전으로-변경하기" class="headerlink" title="라즈베리파이 파이썬 기본버전을 최신버전으로 변경하기"></a>라즈베리파이 파이썬 기본버전을 최신버전으로 변경하기</h2><p>안녕하세요.</p><p>이번에 소개할 내용은 라즈베리파이를 설치후 파이썬을 설치했습니다만</p><p>최신버전을 사용하지 않고 기본버전 2.x버전대를 사용하게 되는것을 알수가 있습니다.</p><p>그래서 기본버전대에서 최신버전인 3.x버전으로 변경하는 방법을 소개해 드리도록 하겠습니다.</p><blockquote><h5 id="주의사항"><a href="#주의사항" class="headerlink" title="주의사항"></a>주의사항</h5><p>아래의 방법은 꼭 필요하신 분들에게만 추천 합니다.<br>apt-get에서 최신버전 업데이트를 할경우 여러가지 에러나 문제점이 발생할 가능성이 있습니다.</p></blockquote><p>우선 라즈베리파이를 VNC를 이용해서 접속후 터미널을 실행해 주세요.</p><p><img src="001-11.png" alt="image"></p><p>아래의 명령어를 입력해서 파이선 버전을 확인 합니다.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ python --version</span><br></pre></td></tr></table></figure><p>아래와 같이 2.x버전대가 출력되는것을 알수가 있습니다.</p><p><img src="002-10.png" alt="image"></p><p>아래의 명령어를 입력하시기 바랍니다.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> /usr/bin</span><br></pre></td></tr></table></figure><p><img src="003-10.png" alt="image"></p><p>최신버전의 파이썬이 설치가 되어있는지 확인을 위해서 아래의 명령어를 입력해 주세요.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ls -al python3*</span><br></pre></td></tr></table></figure><p><img src="004-8.png" alt="image"></p><p><img src="005-8.png" alt="image"></p><p>설치되어있는 3버전대의 파이썬이 있는것을 확인하실수 있습니다.</p><p>이젠 python3을 python으로 변경을 할것입니다.</p><p>나는 변경하지 않고 그냥사용하실 분들은 파이썬을 실행하실때 python이 아닌 python3을 입력해서</p><p>사용하셔도 되지만 깜빡하고 3을 빼먹는 경우가 있기때문에 재설정을 해주겠습니다.</p><p>이때 기존의 파이썬 링크를 3버전대의 링크로 재설정을 하기위해선 심볼릭링크란 명령어를 사용하게 됩니다.</p><p>심볼릭링크는 유닉스,리눅스 시스템에서 사용하는것으로 윈도우에서 쇼트컷(바로가기)와 동일한 기능입니다.</p><p>아래의 명령어를 콘솔에 입력해 주시기 바랍니다.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo ls -sf /usr/bin/python3.7 /usr/bin/python</span><br></pre></td></tr></table></figure><p><img src="006-7.png" alt="image"></p><p>실행을 하시면 아래와 같이 나오게 됩니다.</p><p><img src="007-7.png" alt="image"></p><p>그럼 이제 버전이 제대로 설정이 되었는지 확인을 해봐야 합니다.</p><p>아래의 명령어를 입력해서 2.x버전대에서 3.x버전대로 변경이 되었는지 확인해 보시면 되겠습니다.</p><p><a href="https://www.python.org/">파이썬 공식 홈페이지</a></p>]]></content:encoded>
      
      
      <category domain="https://playneko.github.io/categories/Rasberry-Pi/">Rasberry Pi</category>
      
      <category domain="https://playneko.github.io/categories/Rasberry-Pi/Python/">Python</category>
      
      
      <category domain="https://playneko.github.io/tags/Rasberry-Pi/">Rasberry Pi</category>
      
      <category domain="https://playneko.github.io/tags/SSH/">SSH</category>
      
      <category domain="https://playneko.github.io/tags/VNC/">VNC</category>
      
      <category domain="https://playneko.github.io/tags/%E3%83%A9%E3%82%BA%E3%83%99%E3%83%AA%E3%83%BC%E3%83%91%E3%82%A4/">ラズベリーパイ</category>
      
      <category domain="https://playneko.github.io/tags/%EB%9D%BC%EC%A6%88%EB%B2%A0%EB%A6%AC%ED%8C%8C%EC%9D%B4/">라즈베리파이</category>
      
      <category domain="https://playneko.github.io/tags/Python/">Python</category>
      
      <category domain="https://playneko.github.io/tags/link/">link</category>
      
      <category domain="https://playneko.github.io/tags/ln/">ln</category>
      
      <category domain="https://playneko.github.io/tags/%EC%8B%AC%EB%B3%BC%EB%A6%AD%EB%A7%81%ED%81%AC/">심볼릭링크</category>
      
      <category domain="https://playneko.github.io/tags/%ED%8C%8C%EC%9D%B4%EC%8D%AC/">파이썬</category>
      
      
      <comments>https://playneko.github.io/2020/05/31/rasberry-pi-015/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>라즈베리파이에 GPIO 파이썬을 이용해 OLED화면 글자출력</title>
      <link>https://playneko.github.io/2020/05/31/rasberry-pi-014/</link>
      <guid>https://playneko.github.io/2020/05/31/rasberry-pi-014/</guid>
      <pubDate>Sat, 30 May 2020 16:00:00 GMT</pubDate>
      
      <description>&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;라즈베리파이에 GPIO와 파이선을 이용해서 OLED화면에 글자 출력&lt;br&gt;이번에 소개할 내용은 라즈베리파이에 GPIO를 이용해서 OLED화면에 글자나 그림을 출력하기 입니다.&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<!-- excerpt --><h2 id="라즈베리파이에-GPIO와-파이선을-이용해서-OLED화면에-글자-출력"><a href="#라즈베리파이에-GPIO와-파이선을-이용해서-OLED화면에-글자-출력" class="headerlink" title="라즈베리파이에 GPIO와 파이선을 이용해서 OLED화면에 글자 출력"></a>라즈베리파이에 GPIO와 파이선을 이용해서 OLED화면에 글자 출력</h2><p>안녕하세요.</p><p>이번에 소개할 내용은 라즈베리파이에 GPIO를 이용해서 OLED화면에 글자나 그림을 출력하기 입니다.</p><p>우선 준비물이 필요 합니다.</p><p>라즈베리파이 본체 OS설치와 Python설치가 끝난 상태</p><p>저의 경우는 라즈베리파이 제로를 이용해서 테스트를 했습니다.</p><blockquote><ul><li>준비물<ul><li>플레이트 보드</li><li>0.96인치 OLED LCD스크린</li><li>점퍼와이어 암,수가 붙어있는걸로 합니다. 4줄필요</li></ul></li></ul></blockquote><p>이렇게 준비물이 갖춰져 있는지 확인 하시고 본격적으로 OLED화면에 출력하기를 하겠습니다.</p><p><img src="002-e1590889756380.jpg" alt="image"></p><p><img src="003-e1590889774899.jpg" alt="image"></p><p><img src="001-e1590889826174.jpg" alt="image"></p><p><img src="002-1-e1590889857249.jpg" alt="image"></p><p><img src="003-1-e1590889887151.jpg" alt="image"></p><p>모든 구성품이 준비가 되셨으면 점퍼케이블을 라즈베리파이와 플레이트보드에 연결을 해야만 합니다만</p><p>구매하신 OLED에 따라 화면위에 적혀져 있는 핀값에 라즈베리파이의 핀번호를 연결을 해주셔야 합니다.</p><p>저의 경우는 GND, VCC, SCL, SDA라고 적혀져 있습니다.</p><p>라즈베리파이의 핀 번호에 관련해선 아래의 링크로 들어가시면 확인 하실수 있습니다.</p><p><a href="https://playneko.github.io/2020/05/28/rasberry-pi-010/">라즈베리파이에서 GPIO를 사용하기전 알아두어야 할 사항</a></p><p>저의 경우는 아래의 표와같이 라즈베리파이와 OLED의 핀과 연결을 했습니다.</p><table><thead><tr><th align="center">OLED Pin</th><th align="center">Pi GPIO Pin</th><th align="center">Notes</th></tr></thead><tbody><tr><td align="center">VCC</td><td align="center">1</td><td align="center">3.3V</td></tr><tr><td align="center">SDA</td><td align="center">3</td><td align="center">I2C SCA</td></tr><tr><td align="center">SCL</td><td align="center">5</td><td align="center">I2C SCL</td></tr><tr><td align="center">GND</td><td align="center">9</td><td align="center">Ground</td></tr></tbody></table><p><img src="004-1.jpg" alt="image"></p><p>라즈베리파이를 이용해서 OLED 출력을 하기위해선 코딩을 해야만 합니다.</p><p>기본적인 코딩관련 설명은 이전의 LED점등하기 글에 올려두었으니 참고를 해주시기 바랍니다.</p><p><a href="https://playneko.github.io/2020/05/30/rasberry-pi-013/">라즈베리파이에 GPIO와 파이선을 이용해서 LED를 켜보자 바로가기</a></p><p>라즈베리파이를 VNC로 접속을 하시고 터미널을 실행해 주세요.</p><p><img src="001-10.png" alt="image"></p><p>OLED를 사용하기위해선 몇가지 설정과 설치가 필요합니다.</p><p>콘솔에 아래의 명령어를 입력해 주세요.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo raspi-config</span><br></pre></td></tr></table></figure><p><img src="002-9.png" alt="image"></p><p>아래와 같이 설정화면이 표시가 되면 5번항목의 인터페이스 옵션설정으로 들어가시면 됩니다.</p><p><img src="003-9.png" alt="image"></p><p>아래의 화면과 같이 P5의 I2C항목에 들어가시기 바랍니다.</p><p><img src="004-7.png" alt="image"></p><p>I2C를 활성화 할것인지 물어보게 됩니다. 그러면 승인을 해주시면 되겠습니다.</p><p><img src="005-7.png" alt="image"></p><p>승인완료 화면이 나오게 되며 확인을 눌러주세요.</p><p><img src="006-6.png" alt="image"></p><p>그러면 다시 처음 설정화면으로 돌아오게 되며 피니쉬를 눌러서 나오시면 되겠습니다.</p><p><img src="007-6.png" alt="image"></p><p><img src="008-5.png" alt="image"></p><p>다시 콘솔창이 나오게 되면 동작에 필요한 파이선 라이브러리를 설치를 하셔야만 합니다.</p><p>우선 라즈베리파이에 파이선이 설치가 안되어 있으신 분들은 아래의 링크를 통해서 설치를 해주시기 바랍니다.</p><p><a href="https://playneko.github.io/2020/05/28/rasberry-pi-011/">라즈베리파이에 GPIO를 이용하여 코딩을 위해 파이썬 준비</a></p><p>파이선 버전이 3버전대인 경우는 아래의 명령어를 차례대로 입력해서 설치를 해주시기 바랍니다.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ sudo apt install -y python3-dev</span><br><span class="line">$ sudo apt install -y python-smbus i2c-tools</span><br><span class="line">$ sudo apt install -y python3-pil</span><br><span class="line">$ sudo apt install -y python3-pip</span><br><span class="line">$ sudo apt install -y python3-setuptools</span><br><span class="line">$ sudo apt install -y python3-rpi.gpio</span><br></pre></td></tr></table></figure><p>파이선 버전이 2버전대인 경우는 아래의 명령어를 차례대로 입력해서 설치를 해주시기 바랍니다.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ sudo apt install -y python-dev</span><br><span class="line">$ sudo apt install -y python-smbus i2c-tools</span><br><span class="line">$ sudo apt install -y python-pil</span><br><span class="line">$ sudo apt install -y python-pip</span><br><span class="line">$ sudo apt install -y python-setuptools</span><br></pre></td></tr></table></figure><p>일단 저는 3.x버전이 설치되어있는 상태이므로 3.x의 명령어를 입력해서 설치를 하겠습니다.</p><p><img src="009_1.png" alt="image"></p><p><img src="009_2.png" alt="image"></p><p><img src="009_3.png" alt="image"></p><p><img src="009_4.png" alt="image"></p><p><img src="009_5.png" alt="image"></p><p><img src="009_6.png" alt="image"></p><p>이렇게 설치가 모두 완료가 되었습니다.</p><p>이제 OLED 모듈주소를 찾아야 합니다.</p><p>아래의 명령어를 입력해 주세요.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ i2cdetect -y 1</span><br></pre></td></tr></table></figure><p>아래와같이 3c라고 표시되는것이 OLED 스크린 장치가 정상 인식이 된것을 확인 되었습니다.</p><p><img src="010-4.png" alt="image"></p><p>장치 인식까지 모두 되셨으면</p><p>깃허브에서 화면에 출력가능한 샘플을 받아서 실행을 해보도록 하겠습니다.</p><p>우선 깃허브를 설치를 해야하므로 아래의 명령어를 입력해 주세요.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo apt install -y git</span><br></pre></td></tr></table></figure><p><img src="011-3.png" alt="image"></p><p>아래의 깃허브 주소에서 샘플예제를 다운로드 받겠습니다.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ git <span class="built_in">clone</span> https://github.com/adafruit/Adafruit_Python_SSD1306.git</span><br><span class="line">$ ls -al</span><br><span class="line">$ <span class="built_in">cd</span> Adafruit_Python_SSD1306</span><br></pre></td></tr></table></figure><p><img src="012-3.png" alt="image"></p><p><img src="013-3.png" alt="image"></p><p>깃허브에서 샘플데이터를 받으신후 폴더안을 확인 하시면 setup.py가 있는것을 확인하실수 있습니다.</p><p>우선 setup.py을 이용해 설치를 해보도록 하겠습니다.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 파이선 2.x사용자</span></span><br><span class="line">$ sudo python setup.py install</span><br><span class="line"><span class="comment"># 파이선 3.x사용자</span></span><br><span class="line">$ sudo python3 setup.py install</span><br></pre></td></tr></table></figure><p>설치를 하시게 되면 설치과정이 나오게되며 성공적으로 설치가 끝난것을 확인 하실수 있습니다.</p><p><img src="014-3.png" alt="image"></p><p>그럼 샘플폴더로 이동을 하시고 실행을 해보도록 하겠습니다.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> examples</span><br></pre></td></tr></table></figure><p><img src="015-2.png" alt="image"></p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 샘플폴더를 확인하시면 여러가지 샘플파일이 있는것을 확인 하실수 있습니다.</span><br><span class="line">animate.py, buttons.py, image.py, shapes.py, stats.py</span><br></pre></td></tr></table></figure><p>이중에 몇가지만 실행을 해보도록 하겠습니다.</p><p><img src="016-1.png" alt="image"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ python3 animate.py</span><br><span class="line"><span class="comment"># 실행후 종료시에는 Ctrl + C키를 눌러주세요.</span></span><br></pre></td></tr></table></figure><p><img src="005-1.jpg" alt="image"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ python3 image.py</span><br><span class="line"><span class="comment"># 실행후 종료시에는 Ctrl + C키를 눌러주세요.</span></span><br></pre></td></tr></table></figure><p><img src="006-1.jpg" alt="image"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ python3 stats.py</span><br><span class="line"><span class="comment"># 실행후 종료시에는 Ctrl + C키를 눌러주세요.</span></span><br></pre></td></tr></table></figure><p><img src="007-1.jpg" alt="image"></p>]]></content:encoded>
      
      
      <category domain="https://playneko.github.io/categories/Rasberry-Pi/">Rasberry Pi</category>
      
      <category domain="https://playneko.github.io/categories/Rasberry-Pi/Python/">Python</category>
      
      
      <category domain="https://playneko.github.io/tags/Rasberry-Pi/">Rasberry Pi</category>
      
      <category domain="https://playneko.github.io/tags/SSH/">SSH</category>
      
      <category domain="https://playneko.github.io/tags/VNC/">VNC</category>
      
      <category domain="https://playneko.github.io/tags/%E3%83%A9%E3%82%BA%E3%83%99%E3%83%AA%E3%83%BC%E3%83%91%E3%82%A4/">ラズベリーパイ</category>
      
      <category domain="https://playneko.github.io/tags/%EB%9D%BC%EC%A6%88%EB%B2%A0%EB%A6%AC%ED%8C%8C%EC%9D%B4/">라즈베리파이</category>
      
      <category domain="https://playneko.github.io/tags/Python/">Python</category>
      
      <category domain="https://playneko.github.io/tags/git-hub/">git hub</category>
      
      <category domain="https://playneko.github.io/tags/git/">git</category>
      
      <category domain="https://playneko.github.io/tags/%EA%B9%83%ED%97%88%EB%B8%8C/">깃허브</category>
      
      <category domain="https://playneko.github.io/tags/0-96%EC%9D%B8%EC%B9%98/">0.96인치</category>
      
      <category domain="https://playneko.github.io/tags/%EC%8A%A4%ED%81%AC%EB%A6%B0/">스크린</category>
      
      <category domain="https://playneko.github.io/tags/LCD/">LCD</category>
      
      <category domain="https://playneko.github.io/tags/oled/">oled</category>
      
      
      <comments>https://playneko.github.io/2020/05/31/rasberry-pi-014/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>라즈베리파이에 GPIO와 파이선을 이용해서 LED를 켜보자</title>
      <link>https://playneko.github.io/2020/05/30/rasberry-pi-013/</link>
      <guid>https://playneko.github.io/2020/05/30/rasberry-pi-013/</guid>
      <pubDate>Fri, 29 May 2020 16:00:00 GMT</pubDate>
      
      <description>&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;라즈베리파이에 GPIO와 파이선을 이용해서 LED를 켜보자&lt;br&gt;이번에 소개할 내용은 라즈베리파이에 GPIO를 이용해서 LED를 켜보자 입니다.&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<!-- excerpt --><h2 id="라즈베리파이에-GPIO와-파이선을-이용해서-LED를-켜보자"><a href="#라즈베리파이에-GPIO와-파이선을-이용해서-LED를-켜보자" class="headerlink" title="라즈베리파이에 GPIO와 파이선을 이용해서 LED를 켜보자"></a>라즈베리파이에 GPIO와 파이선을 이용해서 LED를 켜보자</h2><p>안녕하세요.</p><p>이번에 소개할 내용은 라즈베리파이에 GPIO를 이용해서 LED를 켜보자 입니다.</p><p>우선 준비물이 필요 합니다.</p><p>라즈베리파이 본체 OS설치와 Python설치가 끝난 상태</p><p>저의 경우는 라즈베리파이 제로를 이용해서 테스트를 했습니다.</p><blockquote><ul><li>플레이트 보드</li><li>LED와 저항1KΩ</li><li>점퍼와이어 암,수가 붙어있는걸로 합니다.</li></ul></blockquote><p>이렇게 준비물이 갖춰져 있는지 확인 하시고 본격적으로 LED켜보기를 하겠습니다.</p><p><img src="002-300x161.jpg"></p><p><img src="003-300x192.jpg"></p><p><img src="004-520x402.jpg"></p><p><img src="005.jpg"></p><p><img src="006-e1590850911270.jpg"></p><p>본격적으로 라즈베리파이에서 LED를 켜보기에 앞서</p><p>LED가 연결한다고 혼자서 저절로 켜지는게 아니기때문에 코딩을 해주셔야만 합니다.</p><p>샘플 소스를 보시고 따라만 하셔도 문제없이 LED를 켜보실수가 있습니다.</p><p>컴퓨터에 개발환경이 구축이 되어있으시면 개발환경에서 하셔도 되며</p><p>개발환경이 구축이 안되어 있는 분은 가장 간단한 방법으로 메모장을 이용해서</p><p>코딩하는 방법을 알아보도록 하겠습니다.</p><p>일단 텍스트 문서파일을 추가 합니다.</p><p><img src="001_1.png"></p><p><img src="001_2.png"></p><p>파일명을 확장자까지 아래와같이 변경해 주세요.</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gpio_led_turn_on.py</span><br></pre></td></tr></table></figure><p><img src="001_3.png"></p><p>파일을 메모장으로 여시면 당연히 아무것도 없는 상태이므로 이제부터 코딩을 해보도록 합니다.</p><p><img src="001_4.png"></p><p>소스코드를 입력하신후 저장을 합니다.</p><p><img src="001_5-1.png"></p><p>아래는 LED를 점등하기 위한 소스코드 입니다.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> RPi.GPIO <span class="keyword">as</span> GPIO</span><br><span class="line"></span><br><span class="line">pinNum = <span class="number">18</span> <span class="comment"># PIN번호</span></span><br><span class="line">GPIO.setmode(GPIO.BCM)</span><br><span class="line">GPIO.setup(pinNum, GPIO.OUT)</span><br><span class="line"></span><br><span class="line">cnt = <span class="number">15</span> <span class="comment"># 카운트 15회</span></span><br><span class="line">flag = <span class="literal">True</span> <span class="comment"># 플래그 True</span></span><br><span class="line"></span><br><span class="line">print(<span class="string">&quot;LED is ON&quot;</span>) <span class="comment"># 콘솔에 출력할 내용</span></span><br><span class="line">GPIO.output(pinNum, flag) <span class="comment"># 핀번호에 플래그를 설정</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> cnt &gt; <span class="number">0</span>: <span class="comment"># 카운트가 0보다 크면 루프를 돌립니다.</span></span><br><span class="line"></span><br><span class="line">    cnt -= <span class="number">1</span> <span class="comment"># 카운트를 1씩 차감</span></span><br><span class="line">    time.sleep(<span class="number">1</span>) <span class="comment"># 1초동안 다음처리를 하지 않습니다.</span></span><br><span class="line"></span><br><span class="line">print(<span class="string">&quot;LED is OFF&quot;</span>) <span class="comment"># 콘솔에 출력할 내용</span></span><br><span class="line">GPIO.cleanup() <span class="comment"># GPIO를 초기화 합니다.</span></span><br></pre></td></tr></table></figure><p>그리고 두번째 소스파일을 준비합니다.</p><p>두번째 소스파일은 파일명을 확장자까지 아래와같이 변경해 주세요.</p><p><img src="001_6.png"></p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gpio_led.py</span><br></pre></td></tr></table></figure><p>추가하신 파일도 메모장으로 여신후 아래의 소스코드를 입력해 주세요.</p><p><img src="001_7.png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> RPi.GPIO <span class="keyword">as</span> GPIO</span><br><span class="line"></span><br><span class="line">pinNum = <span class="number">18</span> <span class="comment"># PIN번호</span></span><br><span class="line">GPIO.setmode(GPIO.BCM)</span><br><span class="line">GPIO.setup(pinNum, GPIO.OUT)</span><br><span class="line"></span><br><span class="line">cnt = <span class="number">15</span> <span class="comment"># 카운트 15</span></span><br><span class="line">flag = <span class="literal">True</span> <span class="comment"># 플래그 True</span></span><br><span class="line"><span class="keyword">while</span> cnt &gt; <span class="number">0</span>: <span class="comment"># 카운트가 0보다 크면</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> flag: <span class="comment"># 플래그가 True인 경우</span></span><br><span class="line">        print(<span class="string">&quot;LED is ON&quot;</span>) <span class="comment"># LED가 켜졌다는 내용을 콘솔에 출력</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">else</span>: <span class="comment"># 위의 조건외의 경우</span></span><br><span class="line">        print(<span class="string">&quot;LED is OFF&quot;</span>) <span class="comment"># LED가 꺼졌다는 내용을 콘솔에 출력</span></span><br><span class="line"></span><br><span class="line">    GPIO.output(pinNum, flag) <span class="comment"># 핀번호에 플래그를 설정</span></span><br><span class="line">    cnt -= <span class="number">1</span> <span class="comment"># 카운트를 1씩 감소합니다.</span></span><br><span class="line">    flag = <span class="keyword">not</span> flag <span class="comment"># 플래그를 반대로 설정합니다.</span></span><br><span class="line">    time.sleep(<span class="number">0.5</span>) <span class="comment"># 0.5초동안 잠시 대기</span></span><br><span class="line"></span><br><span class="line">GPIO.cleanup() <span class="comment"># 루프가 종료되면 GPIO를 초기화 합니다.</span></span><br></pre></td></tr></table></figure><p>저장한 소스파일은 삼바를 통해서 라즈베리파이의 임의의 폴더에 소스파일을 배치해 주세요.</p><p>삼바가 설정이 안되어 있으신 분은 삼바 연결설정을 하시고 다음단계를 진행해 주세요.</p><p>점퍼케이블을 알맞은 PIN에 연결하기 위해선 우선</p><p>라즈베리파이에서 GPIO를 사용하기전 알아두어야 할 사항을 확인해주시기 바랍니다.</p><p>저는 PIN번호 18번 GPIO 24번에 빨간색 점퍼케이블을 연결을 했습니다.</p><p>두번째 점퍼 케이블은 GND와 연결을 해주시면 되겠습다.</p><p>저의 경우는 PIN번호 34번에 있는 GND에 연결을 했습니다.</p><p>플레이트 보드에 LED와 저항과 점퍼케이블 연결이 끝나셨으면</p><p>VNC를 이용해 라즈베리파이에 접속하신후 터미널을 실행 하십니다.</p><p>터미널을 여신후 라즈베리파이에 넣어두신 소스파일이 있는 경로까지 이동 하십니다.</p><p><img src="001-9.png"></p><p>첨 실행해 볼것은 15초동안 LED가 점등되는 gpio_led_turn_on.py를 실행을 합니다.</p><p>아래와 같이 콘솔에 명령어를 입력해 주세요.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo python ./gpio_led_turn_on.py</span><br></pre></td></tr></table></figure><p><img src="004-6.png"></p><p>LED점등 프로그램을 기동하시면 아래의 사진과 같이 잘 안보이시겠지만 미묘하게</p><p>15초동안 불이 켜지는것을 확인 하실수 있습니다.</p><p><img src="007-e1590850952194.jpg"></p><p><img src="008-e1590850971744.jpg"></p><p>이번에는 두번째 소스파일을 실행 합니다.</p><p><img src="006-5.png"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo python ./gpio_led.py</span><br></pre></td></tr></table></figure><p>두번째 LED점등 소스파일을 실행하시면</p><p>0.5초간격으로 15번 LED가 켜졌다 꺼졌다를 반복하는것을 확인 하실수 있습니다.</p><p>시작은 간단한 LED키고 끄는것을 해보았습니다.</p><p>다음에는 좀더 복잡한것을 가지고 오도록 하겠습니다.</p>]]></content:encoded>
      
      
      <category domain="https://playneko.github.io/categories/Rasberry-Pi/">Rasberry Pi</category>
      
      <category domain="https://playneko.github.io/categories/Rasberry-Pi/Python/">Python</category>
      
      
      <category domain="https://playneko.github.io/tags/Rasberry-Pi/">Rasberry Pi</category>
      
      <category domain="https://playneko.github.io/tags/SSH/">SSH</category>
      
      <category domain="https://playneko.github.io/tags/VNC/">VNC</category>
      
      <category domain="https://playneko.github.io/tags/%E3%83%A9%E3%82%BA%E3%83%99%E3%83%AA%E3%83%BC%E3%83%91%E3%82%A4/">ラズベリーパイ</category>
      
      <category domain="https://playneko.github.io/tags/%EB%9D%BC%EC%A6%88%EB%B2%A0%EB%A6%AC%ED%8C%8C%EC%9D%B4/">라즈베리파이</category>
      
      <category domain="https://playneko.github.io/tags/PIN/">PIN</category>
      
      <category domain="https://playneko.github.io/tags/GPIO-LED/">GPIO - LED</category>
      
      <category domain="https://playneko.github.io/tags/Python/">Python</category>
      
      
      <comments>https://playneko.github.io/2020/05/30/rasberry-pi-013/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>라즈베리파이에서 파이썬을 이용한 GPIO 개발 준비</title>
      <link>https://playneko.github.io/2020/05/28/rasberry-pi-011/</link>
      <guid>https://playneko.github.io/2020/05/28/rasberry-pi-011/</guid>
      <pubDate>Wed, 27 May 2020 17:00:01 GMT</pubDate>
      
      <description>&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;라즈베리파이에서 파이썬을 이용한 GPIO 개발 준비&lt;br&gt;이번에 소개할 내용은 라즈베리파이에 GPIO를 이용하여 코딩을 위해 파이썬 준비 입니다.&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<!-- excerpt --><h2 id="라즈베리파이에서-파이썬을-이용한-GPIO-개발-준비"><a href="#라즈베리파이에서-파이썬을-이용한-GPIO-개발-준비" class="headerlink" title="라즈베리파이에서 파이썬을 이용한 GPIO 개발 준비"></a>라즈베리파이에서 파이썬을 이용한 GPIO 개발 준비</h2><p>일단 라즈베리파이에 VNC로 접속후 터미널을 실행 합니다.</p><p>터미널에서 아래의 명령어를 실행 합니다.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo apt-get update</span><br></pre></td></tr></table></figure><p><img src="001-8.png"></p><p>최신버전으로 업데이트를 하게 됩니다.</p><p><img src="002-8-e1590627633446.png"></p><p><img src="003-8-e1590627697120.png"></p><p>파이썬을 설치하기 위해 아래의 명령어를 입력합니다.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo apt-get install -y python-dev python-setuptools</span><br></pre></td></tr></table></figure><p><img src="004-5.png"></p><p><img src="005-6.png"></p><p>설치가 완료 되었습니다.</p><p>이렇게해서 라즈베리파이에서 파이썬을 사용할수 있는 준비가 되었습니다.</p><p>라즈베리파이 공식 사이트</p><p><a href="https://www.raspberrypi.org/">https://www.raspberrypi.org/</a></p>]]></content:encoded>
      
      
      <category domain="https://playneko.github.io/categories/Rasberry-Pi/">Rasberry Pi</category>
      
      <category domain="https://playneko.github.io/categories/Rasberry-Pi/Python/">Python</category>
      
      
      <category domain="https://playneko.github.io/tags/Rasberry-Pi/">Rasberry Pi</category>
      
      <category domain="https://playneko.github.io/tags/SSH/">SSH</category>
      
      <category domain="https://playneko.github.io/tags/VNC/">VNC</category>
      
      <category domain="https://playneko.github.io/tags/%E3%83%A9%E3%82%BA%E3%83%99%E3%83%AA%E3%83%BC%E3%83%91%E3%82%A4/">ラズベリーパイ</category>
      
      <category domain="https://playneko.github.io/tags/%EB%9D%BC%EC%A6%88%EB%B2%A0%EB%A6%AC%ED%8C%8C%EC%9D%B4/">라즈베리파이</category>
      
      <category domain="https://playneko.github.io/tags/%ED%8C%8C%EC%9D%B4%EC%8D%AC-apt/">파이썬 - apt</category>
      
      <category domain="https://playneko.github.io/tags/apt-get/">apt-get</category>
      
      <category domain="https://playneko.github.io/tags/GPIO/">GPIO</category>
      
      <category domain="https://playneko.github.io/tags/python/">python</category>
      
      <category domain="https://playneko.github.io/tags/sudo/">sudo</category>
      
      
      <comments>https://playneko.github.io/2020/05/28/rasberry-pi-011/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>.htaccess를 수정해서 URL 리다이렉트(Redirect) 처리하기</title>
      <link>https://playneko.github.io/2020/05/28/rasberry-pi-012/</link>
      <guid>https://playneko.github.io/2020/05/28/rasberry-pi-012/</guid>
      <pubDate>Wed, 27 May 2020 17:00:01 GMT</pubDate>
      
      <description>&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;.htaccess를 수정해서 URL 리다이렉트(Redirect) 처리하기&lt;br&gt;이번에 소개할 내용은 .htaccess를 수정해서 URL 리다이렉트 처리하기 입니다.&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<!-- excerpt --><h2 id="htaccess를-수정해서-URL-리다이렉트-Redirect-처리하기"><a href="#htaccess를-수정해서-URL-리다이렉트-Redirect-처리하기" class="headerlink" title=".htaccess를 수정해서 URL 리다이렉트(Redirect) 처리하기"></a>.htaccess를 수정해서 URL 리다이렉트(Redirect) 처리하기</h2><p>안녕하세요.</p><p>이번에 소개할 내용은 .htaccess를 수정해서 URL 리다이렉트 처리하기 입니다.</p><p>사이트를 운영을 하시다 보면 특정 URL로 접속을 하거나 할경우 다른페이지로 이동을 시키고 싶은경우</p><p>아니면 웹서버를 호스팅서버로 이용을 하고 있어서 Apache 또는 Nginx서버를 직접 수정할수 없는 경우</p><p>그럴경우를 위해서 각 사이트별로 간단하게 리다이렉트 처리를 할수있는 방법을 알려드리도록 하겠습니다.</p><p>.htaccess를 수정해서 URL 리다이렉트 처리를 위해선</p><p>기본적으로 각 웹서버에서 도메인이 연결된 홈디렉토리의 root디렉토리에</p><p>.htaccess파일이 없을경우 추가해 주시기 바랍니다.</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">www.test.<span class="keyword">com</span> URL로 접속할경우 www.playneko.<span class="keyword">com</span>으로 리다이렉트처리</span><br><span class="line">RewriteEngine On</span><br><span class="line">RewriteCond %&#123;HTTP_HOST&#125; ^(www\.test\.<span class="keyword">com</span>)</span><br><span class="line">RewriteRule (.*) http://www.playneko.<span class="keyword">com</span>/$<span class="number">1</span> [L]</span><br></pre></td></tr></table></figure><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">www.test.<span class="keyword">com</span>또는 test.<span class="keyword">com</span> URL로 접속할경우 www.playneko.<span class="keyword">com</span>으로 리다이렉트처리</span><br><span class="line">RewriteEngine On</span><br><span class="line">RewriteCond %&#123;HTTP_HOST&#125; ^(www\.test\.<span class="keyword">com</span>|test\.<span class="keyword">com</span>)</span><br><span class="line">RewriteRule (.*) http://www.playneko.<span class="keyword">com</span>/$<span class="number">1</span> [L]</span><br></pre></td></tr></table></figure><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">test.<span class="keyword">com</span>에 www가 없을경우 www를 붙이게끔 하기</span><br><span class="line">RewriteEngine On</span><br><span class="line">RewriteCond %&#123;HTTP_HOST&#125; ^(test\.<span class="keyword">com</span>)</span><br><span class="line">RewriteRule (.*) http://www.test.<span class="keyword">com</span>/$<span class="number">1</span> [L]</span><br></pre></td></tr></table></figure><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">test.<span class="keyword">com</span>을 test.<span class="keyword">com</span>/xxx로 확장 변경하기</span><br><span class="line">RewriteEngine On</span><br><span class="line">RewriteCond %&#123;HTTP_HOST&#125; ^(test\.<span class="keyword">com</span>|www\.test\.<span class="keyword">com</span>)</span><br><span class="line">RewriteRule (.*) /xxx/$<span class="number">1</span> [L]</span><br></pre></td></tr></table></figure><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">test.<span class="keyword">com</span>/xxx로 접속한 하위 주소까지 playneko.<span class="keyword">com</span>로 리다이렉트 처리(영구이동)</span><br><span class="line"># test.<span class="keyword">com</span>/xxx/ 하위 폴더안에 .htaccess파일을 추가 합니다.</span><br><span class="line">RewriteEngine On</span><br><span class="line">RewriteRule (.*) http://www.playneko.<span class="keyword">com</span>/$<span class="number">1</span> [R=<span class="number">301</span>,L]</span><br><span class="line"></span><br><span class="line">다른방법으로는 아래와 같습니다.</span><br><span class="line"># test.<span class="keyword">com</span>/ 하위 폴더안에 .htaccess파일을 추가 합니다.</span><br><span class="line">RewriteEngine On</span><br><span class="line">RewriteRule ^xxx/(.*) http://www.playneko.<span class="keyword">com</span>/$<span class="number">1</span> [R=<span class="number">301</span>,L]</span><br><span class="line"></span><br><span class="line"># R=<span class="number">301</span>은 해당 도메인으로 영구적으로 리다이렉트를 나타내며</span><br><span class="line"># 이럴경우 도메인이 변경되었을때도 검색봇들이 변경을 인지하고</span><br><span class="line"># 기존 도메인에서 새로운 도메인으로 갱신을 하게 됩니다.</span><br></pre></td></tr></table></figure><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">test.<span class="keyword">com</span>을 포함하는 서브도메인을 포함한 URL의 경우 playneko.<span class="keyword">com</span>으로 접속</span><br><span class="line">RewriteEngine On</span><br><span class="line">RewriteCond %&#123;HTTP_HOST&#125; test\.<span class="keyword">com</span></span><br><span class="line">RewriteRule ^(.+) %&#123;HTTP_HOST&#125;$<span class="number">1</span> [C]</span><br><span class="line">RewriteRule ^([^.]+)\.test\.<span class="keyword">com</span>(.*) http://$<span class="number">1</span>.playneko.<span class="keyword">com</span>/$<span class="number">2</span> [L]</span><br><span class="line">RewriteRule ^test\.<span class="keyword">com</span>(.*) http://playneko.<span class="keyword">com</span>/$<span class="number">1</span> [L]</span><br><span class="line"></span><br><span class="line">#해당 라인에서 끝이란 표현으로 [L]을 추가 합니다.</span><br><span class="line">#그리고 그 이후 나오는 모든 구문은 무시하는 형식 (break;)와 동일합니다.</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      
      <category domain="https://playneko.github.io/categories/Rasberry-Pi/">Rasberry Pi</category>
      
      <category domain="https://playneko.github.io/categories/Rasberry-Pi/Linux/">Linux</category>
      
      
      <category domain="https://playneko.github.io/tags/Rasberry-Pi/">Rasberry Pi</category>
      
      <category domain="https://playneko.github.io/tags/SSH/">SSH</category>
      
      <category domain="https://playneko.github.io/tags/VNC/">VNC</category>
      
      <category domain="https://playneko.github.io/tags/%E3%83%A9%E3%82%BA%E3%83%99%E3%83%AA%E3%83%BC%E3%83%91%E3%82%A4/">ラズベリーパイ</category>
      
      <category domain="https://playneko.github.io/tags/%EB%9D%BC%EC%A6%88%EB%B2%A0%EB%A6%AC%ED%8C%8C%EC%9D%B4/">라즈베리파이</category>
      
      <category domain="https://playneko.github.io/tags/linux/">linux</category>
      
      <category domain="https://playneko.github.io/tags/%EB%A6%AC%EB%88%85%EC%8A%A4/">리눅스</category>
      
      <category domain="https://playneko.github.io/tags/apache-htaccess/">apache - htaccess</category>
      
      <category domain="https://playneko.github.io/tags/nginx/">nginx</category>
      
      <category domain="https://playneko.github.io/tags/redirect/">redirect</category>
      
      <category domain="https://playneko.github.io/tags/webserver/">webserver</category>
      
      <category domain="https://playneko.github.io/tags/%EC%9B%B9%EC%84%9C%EB%B2%84/">웹서버</category>
      
      
      <comments>https://playneko.github.io/2020/05/28/rasberry-pi-012/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>라즈베리파이 GPIO Pin I2C 제어하기를 사용하기 전 주의사항</title>
      <link>https://playneko.github.io/2020/05/28/rasberry-pi-010/</link>
      <guid>https://playneko.github.io/2020/05/28/rasberry-pi-010/</guid>
      <pubDate>Wed, 27 May 2020 16:00:00 GMT</pubDate>
      
      <description>&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;라즈베리 파이 GPIO I2C 제어하기를 사용하기전 알아두어야 할 사항&lt;br&gt;이번에 소개할 내용은 라즈베리파이에서 GPIO를 사용하기전 알아두어야 할 사항을 작성해 보았습니다.&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<!-- excerpt --><h2 id="라즈베리-파이-GPIO-I2C-제어하기를-사용하기전-알아두어야-할-사항"><a href="#라즈베리-파이-GPIO-I2C-제어하기를-사용하기전-알아두어야-할-사항" class="headerlink" title="라즈베리 파이 GPIO I2C 제어하기를 사용하기전 알아두어야 할 사항"></a>라즈베리 파이 GPIO I2C 제어하기를 사용하기전 알아두어야 할 사항</h2><p>안녕하세요.</p><p>이번에 소개할 내용은 라즈베리파이에서 GPIO를 사용하기전 알아두어야 할 사항을 작성해 보았습니다.</p><p>GPIO는 General Purpose Input / Output 으로 말 그대로 범용 입출력 인터페이스입니다.</p><p>PCB, ICT보드 등 다양한 전자기판에서 내부 회로 이외 외부적으로 물리적으로 소통할 수 있는 장치로,</p><p>이를 이용해서 LED, Servo Motor 등 다양한 물리적 외부 장치들에 대해서 배선하고 연결하여 제어 할수 있습니다.</p><p>아래는 GPIO 배치도 입니다.</p><p>무엇을 만드냐에 따라 PIN PORT에 연결하여 제어를 하실수 있습니다.</p><p><img src="RasPiLED.png"></p><p>아래의 명령어로 자신의 라즈베리파이의 GPIO pin을 확인 하실수 있습니다.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ gpio readall</span><br></pre></td></tr></table></figure><p>라즈베리파이 공식 사이트</p><p><a href="https://www.raspberrypi.org/">https://www.raspberrypi.org/</a></p>]]></content:encoded>
      
      
      <category domain="https://playneko.github.io/categories/Rasberry-Pi/">Rasberry Pi</category>
      
      
      <category domain="https://playneko.github.io/tags/Rasberry-Pi/">Rasberry Pi</category>
      
      <category domain="https://playneko.github.io/tags/SSH/">SSH</category>
      
      <category domain="https://playneko.github.io/tags/VNC/">VNC</category>
      
      <category domain="https://playneko.github.io/tags/%E3%83%A9%E3%82%BA%E3%83%99%E3%83%AA%E3%83%BC%E3%83%91%E3%82%A4/">ラズベリーパイ</category>
      
      <category domain="https://playneko.github.io/tags/%EB%9D%BC%EC%A6%88%EB%B2%A0%EB%A6%AC%ED%8C%8C%EC%9D%B4/">라즈베리파이</category>
      
      <category domain="https://playneko.github.io/tags/GPIO-ICT/">GPIO - ICT</category>
      
      <category domain="https://playneko.github.io/tags/LED/">LED</category>
      
      <category domain="https://playneko.github.io/tags/PCB/">PCB</category>
      
      <category domain="https://playneko.github.io/tags/PIN/">PIN</category>
      
      <category domain="https://playneko.github.io/tags/PORT/">PORT</category>
      
      <category domain="https://playneko.github.io/tags/Servo-Motor/">Servo Motor</category>
      
      
      <comments>https://playneko.github.io/2020/05/28/rasberry-pi-010/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>라즈베리파이 또는 리눅스에서 TOUCH를 이용해 날짜 변경하기</title>
      <link>https://playneko.github.io/2020/05/27/rasberry-pi-009/</link>
      <guid>https://playneko.github.io/2020/05/27/rasberry-pi-009/</guid>
      <pubDate>Tue, 26 May 2020 16:00:01 GMT</pubDate>
      
      <description>&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;라즈베리파이 또는 리눅스에서 TOUCH를 이용해 날짜 변경하기&lt;br&gt;라즈베리파이 또는 리눅스상에서 파일을 업로드후 최신 날짜로 변경이 필요한 경우가 있습니다.&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<!-- excerpt --><h2 id="라즈베리파이-또는-리눅스에서-TOUCH를-이용해-날짜-변경하기"><a href="#라즈베리파이-또는-리눅스에서-TOUCH를-이용해-날짜-변경하기" class="headerlink" title="라즈베리파이 또는 리눅스에서 TOUCH를 이용해 날짜 변경하기"></a>라즈베리파이 또는 리눅스에서 TOUCH를 이용해 날짜 변경하기</h2><p>라즈베리파이 또는 리눅스상에서 파일을 업로드후 최신 날짜로 변경이 필요한 경우가 있습니다.</p><p>예를들어 자바 클래스 파일을 업로드 했는데 계속 예전에 올렸던 소스로 반영이 된다던지</p><p>그럴경우 날짜를 최신날자로 변경을 해주어야 최신소스로 인식을 하는 경우가 있습니다.</p><p>그럴경우 TOUCH명령어를 통해서 날짜를 자유롭게 변경하실수 있습니다.</p><p><img src="001-7.png"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-rwxrw-rw-  1 pi pi    0  5月 24 12:00 test.txt</span><br></pre></td></tr></table></figure><p>위와같이 test.txt파일이 있으며 날짜는 5월24일로 설정이 되어있습니다.</p><p>TOUCH를 이용해 날짜를 5월23일로 변경을 해보도록 하겠습니다.</p><p>날짜 이외에도 시분초도 변경이 가능하니 5월23일 15시30초로 변경을 해보도록 하겠습니다.</p><p><img src="002-7.png"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ touch -t 202005231530 ./test.txt</span><br></pre></td></tr></table></figure><p>명령어를 치고 아래와같이 날짜와 시간이 변경된것을 확인하실수 있습니다.</p><p><img src="003-7.png"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-rwxrw-rw-  1 pi pi    0  5月 23 15:30 test.txt</span><br></pre></td></tr></table></figure><p><a href="https://docs.oracle.com/javase/7/docs/api/">JAVA DOC</a></p>]]></content:encoded>
      
      
      <category domain="https://playneko.github.io/categories/Rasberry-Pi/">Rasberry Pi</category>
      
      <category domain="https://playneko.github.io/categories/Rasberry-Pi/Linux/">Linux</category>
      
      
      <category domain="https://playneko.github.io/tags/Rasberry-Pi/">Rasberry Pi</category>
      
      <category domain="https://playneko.github.io/tags/SSH/">SSH</category>
      
      <category domain="https://playneko.github.io/tags/VNC/">VNC</category>
      
      <category domain="https://playneko.github.io/tags/%E3%83%A9%E3%82%BA%E3%83%99%E3%83%AA%E3%83%BC%E3%83%91%E3%82%A4/">ラズベリーパイ</category>
      
      <category domain="https://playneko.github.io/tags/%EB%9D%BC%EC%A6%88%EB%B2%A0%EB%A6%AC%ED%8C%8C%EC%9D%B4/">라즈베리파이</category>
      
      <category domain="https://playneko.github.io/tags/linux-%EB%A6%AC%EB%88%85%EC%8A%A4/">linux - 리눅스</category>
      
      <category domain="https://playneko.github.io/tags/TOUCH-%EB%82%A0%EC%A7%9C%EB%B3%80%EA%B2%BD/">TOUCH - 날짜변경</category>
      
      
      <comments>https://playneko.github.io/2020/05/27/rasberry-pi-009/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>라즈베리파이 또는 리눅스 find 명령어로 오래된 파일 삭제하기</title>
      <link>https://playneko.github.io/2020/05/26/rasberry-pi-008/</link>
      <guid>https://playneko.github.io/2020/05/26/rasberry-pi-008/</guid>
      <pubDate>Mon, 25 May 2020 17:00:01 GMT</pubDate>
      
      <description>&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;라즈베리파이 또는 리눅스 find 명령어로 오래된 파일 삭제하기&lt;br&gt;라즈베리파이 또는 리눅스 서버를 운영하다보면 일정시간이 지나면…&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<!-- excerpt --><h2 id="라즈베리파이-또는-리눅스-find-명령어로-오래된-파일-삭제하기"><a href="#라즈베리파이-또는-리눅스-find-명령어로-오래된-파일-삭제하기" class="headerlink" title="라즈베리파이 또는 리눅스 find 명령어로 오래된 파일 삭제하기"></a>라즈베리파이 또는 리눅스 find 명령어로 오래된 파일 삭제하기</h2><p>라즈베리파이 또는 리눅스 서버를 운영하다보면 일정시간이 지나면</p><p>불필요한 파일이나 로그파일을 삭제하고싶지만 자동으로 하는방법을 설명해 드리겠습니다.</p><p>일정 시간이 지난 파일을 찾는 방법 : find 명령어</p><p>find명령어에 여러가지 옵션이 많이 있습니다만 일단 파일삭제에 필요한 옵션만 이용해 보도록 하겠습니다.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ find 명령어를 통해 변경된지 하루가 넘은 파일을 찾기 위해서는 다음과 같이 옵션이 주어져야 합니다.</span><br><span class="line">$ find /home/pi/Documents/* -mtime +1</span><br></pre></td></tr></table></figure><p>다음과 같이 리스트 파일을 출력해 보신후 파일이 존재한다고 가정했을때</p><p><img src="001-6.png"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">-rwxrw-rw-  1 pi pi    0  5月 24 12:00 txt1.txt</span><br><span class="line">-rwxrw-rw-  1 pi pi    0  5月 23 12:00 txt2.txt</span><br></pre></td></tr></table></figure><p>현재 날짜가 5월 26일 이라고 하면..</p><p>txt1.txt파일은 약1일 전에 만들어진 파일 입니다.</p><p>txt2.txt파일은 2일 전에 만들어진 파일 입니다.</p><p><img src="002-6.png"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ find /home/pi/Documents/* -mtime +1 명령어를 통해서 txt2.txt가 검색이 됩니다.</span><br></pre></td></tr></table></figure><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">-mtime은 수정된 시간을 기준으로 합니다.</span><br><span class="line">-atime은 접근 시간을 기준으로 합니다.</span><br><span class="line">-ctime은 변경된 시간을 기준으로 합니다.</span><br><span class="line">-amin, -cmin, -mmin은 분을 기준으로 사용합니다.</span><br></pre></td></tr></table></figure><p>일정 시간이 지난 파일을 지우는 방법 : find + exec + rm명령어</p><p>일정 시간이 지난 파일을 찾아서 지우는것도 역시 find 명령어를 사용하는데요.</p><p>이번에는 exec라는 옵션을 사용하면 됩니다.</p><p><img src="003-6.png"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ find /home/pi/Documents/* -mtime +1 -<span class="built_in">exec</span> rm &#123;&#125; \;</span><br></pre></td></tr></table></figure><p>txt2.txt 파일이 삭제된것을 확인 하실수 있습니다.</p><p><img src="004-4.png"></p><p>PHP공식사이트</p><p><a href="https://www.php.net/">https://www.php.net/</a></p>]]></content:encoded>
      
      
      <category domain="https://playneko.github.io/categories/Rasberry-Pi/">Rasberry Pi</category>
      
      <category domain="https://playneko.github.io/categories/Rasberry-Pi/Linux/">Linux</category>
      
      
      <category domain="https://playneko.github.io/tags/Rasberry-Pi/">Rasberry Pi</category>
      
      <category domain="https://playneko.github.io/tags/SSH/">SSH</category>
      
      <category domain="https://playneko.github.io/tags/VNC/">VNC</category>
      
      <category domain="https://playneko.github.io/tags/%E3%83%A9%E3%82%BA%E3%83%99%E3%83%AA%E3%83%BC%E3%83%91%E3%82%A4/">ラズベリーパイ</category>
      
      <category domain="https://playneko.github.io/tags/%EB%9D%BC%EC%A6%88%EB%B2%A0%EB%A6%AC%ED%8C%8C%EC%9D%B4/">라즈베리파이</category>
      
      <category domain="https://playneko.github.io/tags/exec/">exec</category>
      
      <category domain="https://playneko.github.io/tags/find/">find</category>
      
      <category domain="https://playneko.github.io/tags/linux/">linux</category>
      
      <category domain="https://playneko.github.io/tags/mtime/">mtime</category>
      
      <category domain="https://playneko.github.io/tags/%EB%A6%AC%EB%88%85%EC%8A%A4/">리눅스</category>
      
      <category domain="https://playneko.github.io/tags/rm/">rm</category>
      
      
      <comments>https://playneko.github.io/2020/05/26/rasberry-pi-008/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Raspberry Pi 3 Model B+ 설치</title>
      <link>https://playneko.github.io/2020/05/26/rasberry-pi-007/</link>
      <guid>https://playneko.github.io/2020/05/26/rasberry-pi-007/</guid>
      <pubDate>Mon, 25 May 2020 16:00:00 GMT</pubDate>
      
      <description>&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;Raspberry Pi 3 Model B+ 설치&lt;br&gt;라즈베리파이 3 모델 B+를 설치하는 영상 입니다.&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<!-- excerpt --><h2 id="Raspberry-Pi-3-Model-B-설치"><a href="#Raspberry-Pi-3-Model-B-설치" class="headerlink" title="Raspberry Pi 3 Model B+ 설치"></a>Raspberry Pi 3 Model B+ 설치</h2><p>라즈베리파이 3 모델 B+를 설치하는 영상 입니다.</p><p>많은 분들이 영상을 참고하고 라즈베리파이를 좀더 쉽게 사용할수 있도록 하겠습니다.</p><p>많은 시청 바랍니다.</p><p>라즈베리파이 공식 사이트</p><p><a href="https://www.raspberrypi.org/">https://www.raspberrypi.org/</a></p><p><a href="https://youtu.be/rna-nl-Bw8E"><img src="hqdefault.jpg"></a></p>]]></content:encoded>
      
      
      <category domain="https://playneko.github.io/categories/Rasberry-Pi/">Rasberry Pi</category>
      
      
      <category domain="https://playneko.github.io/tags/Rasberry-Pi/">Rasberry Pi</category>
      
      
      <comments>https://playneko.github.io/2020/05/26/rasberry-pi-007/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>라즈베리파이 ngrok으로 외부에서 로컬서버 접속 환경 구성</title>
      <link>https://playneko.github.io/2020/05/25/rasberry-pi-006/</link>
      <guid>https://playneko.github.io/2020/05/25/rasberry-pi-006/</guid>
      <pubDate>Sun, 24 May 2020 16:00:00 GMT</pubDate>
      
      <description>&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;라즈베리파이에서 ngrok을 이용한 외부에서 로컬서버 접속환경 구성 방법 입니다.&lt;br&gt;공식사이트에서 ngrok은 NAT와 방화벽 뒤에 있는 로컬 서버를 안전한 터널을 통해…&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<!-- excerpt --><h2 id="라즈베리파이에서-ngrok을-이용한-외부에서-로컬서버-접속환경-구성-방법-입니다"><a href="#라즈베리파이에서-ngrok을-이용한-외부에서-로컬서버-접속환경-구성-방법-입니다" class="headerlink" title="라즈베리파이에서 ngrok을 이용한 외부에서 로컬서버 접속환경 구성 방법 입니다."></a>라즈베리파이에서 ngrok을 이용한 외부에서 로컬서버 접속환경 구성 방법 입니다.</h2><p>공식사이트에서 ngrok은 NAT와 방화벽 뒤에 있는 로컬 서버를 안전한 터널을 통해</p><p>공개 인터넷에 노출시켜 주는 도구라고 설명되어 있습니다.</p><p><img src="001-5.png"></p><p>프로그램은 아래의 공식사이트에서 다운로드 하실수 있습니다.</p><p><a href="https://ngrok.com/download">https://ngrok.com/download</a></p><p>다운로드 하신 파일을 라즈베리파이의 임의 폴더에 압축울 푸신고 넣어주시기 바랍니다.</p><p><img src="002-5-1536x503.png"></p><p>다운로드한 ngrok파일을 라즈베리파이의 임의의 장소에 배치를 해두었습니다.</p><p><img src="003-5.png"></p><p>콘솔창을 실행하신후 ngrok이 위치한 경로까지 이동합니다.</p><p>저는 콘솔창이 열리자 마자 ngrok이 나오게 배치를 해두었습니다.</p><p><img src="005-5.png"></p><p>아래의 명령어를 치시면 되겠습니다.</p><p>포트번호는 자신이 원하는 포트번호를 입력해 주시면 되겠습니다.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ./ngrok http 8099(포트번호는 임의로 지정)</span><br></pre></td></tr></table></figure><p>실행이 되시면 아래와 같이 고유 URL주소를 발급받게 됩니다.</p><p>8시간정도마다 랜덤으로 바뀌기때문에 고정주소를 원하시는 분은 유료로 가입하시면 고정으로 유지하실 수 있습니다.</p><p>ngrok을 이용해서 URL을 생성하시면 단점은 랜덤주소이지만 장점은 http, https를 모두 사용하실수 있게 됩니다.</p><p><img src="006-4.png"></p><p><img src="008-4.png"></p><p>발급받은 주소를 이용해서 실제 웹페이지가 표시가 되는지 확인 해보도록 하겠습니다.</p><p>저의 라즈베리파이에는 웹서버가 구축이 되어 있는 상태입니다.</p><p>웹서버 구축에 대해서는 차후에 게시하도록 하겠습니다.</p><p>발급받은 주소로 접속하니 정상적으로 내부의 라즈베리파이의 웹서버로 접속된것을 확인 하실수 있습니다.</p><p><img src="007-5.png"></p>]]></content:encoded>
      
      
      <category domain="https://playneko.github.io/categories/Rasberry-Pi/">Rasberry Pi</category>
      
      
      <category domain="https://playneko.github.io/tags/Rasberry-Pi/">Rasberry Pi</category>
      
      <category domain="https://playneko.github.io/tags/SSH/">SSH</category>
      
      <category domain="https://playneko.github.io/tags/VNC/">VNC</category>
      
      <category domain="https://playneko.github.io/tags/%E3%83%A9%E3%82%BA%E3%83%99%E3%83%AA%E3%83%BC%E3%83%91%E3%82%A4/">ラズベリーパイ</category>
      
      <category domain="https://playneko.github.io/tags/%EB%9D%BC%EC%A6%88%EB%B2%A0%EB%A6%AC%ED%8C%8C%EC%9D%B4/">라즈베리파이</category>
      
      <category domain="https://playneko.github.io/tags/ngrok/">ngrok</category>
      
      <category domain="https://playneko.github.io/tags/%EA%B3%A0%EC%A0%95ip/">고정ip</category>
      
      <category domain="https://playneko.github.io/tags/%EB%A1%9C%EC%BB%AC%EC%84%9C%EB%B2%84/">로컬서버</category>
      
      
      <comments>https://playneko.github.io/2020/05/25/rasberry-pi-006/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>라즈베리파이 고정 IP Address 설정</title>
      <link>https://playneko.github.io/2020/05/24/rasberry-pi-005/</link>
      <guid>https://playneko.github.io/2020/05/24/rasberry-pi-005/</guid>
      <pubDate>Sat, 23 May 2020 19:00:00 GMT</pubDate>
      
      <description>&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;라즈베리파이에서 유선랜 IP를 고정 IP 할당 설정방법 입니다.&lt;br&gt;라즈베리파이 제로를 사용하시는 분들같이 랜카드가 없으신 경우에는 저렴하게 이용하는 방법 입니다…&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<!-- excerpt --><h2 id="라즈베리파이-고정-IP-Address-설정"><a href="#라즈베리파이-고정-IP-Address-설정" class="headerlink" title="라즈베리파이 고정 IP Address 설정"></a>라즈베리파이 고정 IP Address 설정</h2><p>라즈베리파이 제로를 사용하시는 분들같이 랜카드가 없으신 경우에는 저렴하게</p><p>USB용 이더넷 어뎁터를 구매하신후 이용할실수 있습니다.</p><p>VNC로 라즈베리파이 서버로 접속하고 콘솔창을 여시기 바랍니다.</p><p><img src="001-4.png"></p><p>공유기의 게이트 정보를 얻기위해서 아래의 명령어를 입력해 주세요.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ netstat -nr</span><br></pre></td></tr></table></figure><p><img src="003-4.png"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo vi /etc/dhcpcd.conf</span><br></pre></td></tr></table></figure><p>아래와 같이 나오시면</p><p><img src="002-4.png"></p><p><img src="004-3.png"></p><p><img src="005-4.png"></p><p>위의 부분이 나올때까지 커서를 내려주시기 바랍니다.</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># Example static IP configuration;</span><br><span class="line">#intercafe eth0</span><br><span class="line">#static ip_address=<span class="number">192.168</span>.<span class="number">0.10</span>/<span class="number">24</span></span><br><span class="line">#static ip6_address=fd51:<span class="number">42</span>f8:caae:d92e::ff/<span class="number">64</span></span><br><span class="line">#static routers=<span class="number">192.168</span>.<span class="number">0.1</span></span><br><span class="line">#static domain_name_servers=<span class="number">192.168</span>.<span class="number">0.1</span> <span class="number">8.8</span>.<span class="number">8.8</span> fd51:<span class="number">42</span>f8:caae:d92e::<span class="number">1</span></span><br></pre></td></tr></table></figure><p><img src="006-3.png"></p><p><img src="007-4.png"></p><p>위와같이 4줄에 대해서 #(주석)을 해제하시고</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># Example static IP configuration;</span><br><span class="line">intercafe eth0</span><br><span class="line">static ip_address=<span class="number">10.0</span>.<span class="number">1.30</span>/<span class="number">24</span></span><br><span class="line">#static ip6_address=fd51:<span class="number">42</span>f8:caae:d92e::ff/<span class="number">64</span></span><br><span class="line">static routers=<span class="number">10.0</span>.<span class="number">1.1</span></span><br><span class="line">static domain_name_servers=<span class="number">10.0</span>.<span class="number">1.1</span> <span class="number">8.8</span>.<span class="number">8.8</span> fd51:<span class="number">42</span>f8:caae:d92e::<span class="number">1</span></span><br></pre></td></tr></table></figure><p>static ip_address 부분에 고정하실 아이피로 수정해 주시기 바랍니다.</p><p>static routers 부분에는 공유기 게이트 정보를 입력해 주시기 바랍니다.</p><p>static domain_name_servers 부분의 첫번째 아이피도 공유기의 게이트 정보를 입력해 주시기 바랍니다.</p><p>저장후 빠져나옵니다.</p><p><img src="008-3.png"></p><p>설정 정보를 반영하기위해서 재가동이 필요합니다.</p><p>아래의 명령어를 입력해 주시기 바랍니다.</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo reboot</span><br></pre></td></tr></table></figure><p><img src="009-4.png"></p><p>재기동이 끝난후 새로 바꾼 아이피로 접속을 하시기 바랍니다.</p><p>콘솔창에 아래의 명령어를 입력해 주시기 바랍니다.</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ifconfig</span><br></pre></td></tr></table></figure><p><img src="010-3.png"></p><p>아이피 정보가 고정된 정보로 바뀐것을 확인 하실수 있습니다.</p>]]></content:encoded>
      
      
      <category domain="https://playneko.github.io/categories/Rasberry-Pi/">Rasberry Pi</category>
      
      
      <category domain="https://playneko.github.io/tags/Rasberry-Pi/">Rasberry Pi</category>
      
      <category domain="https://playneko.github.io/tags/SSH/">SSH</category>
      
      <category domain="https://playneko.github.io/tags/VNC/">VNC</category>
      
      <category domain="https://playneko.github.io/tags/%E3%83%A9%E3%82%BA%E3%83%99%E3%83%AA%E3%83%BC%E3%83%91%E3%82%A4/">ラズベリーパイ</category>
      
      <category domain="https://playneko.github.io/tags/%EB%9D%BC%EC%A6%88%EB%B2%A0%EB%A6%AC%ED%8C%8C%EC%9D%B4/">라즈베리파이</category>
      
      <category domain="https://playneko.github.io/tags/vi/">vi</category>
      
      <category domain="https://playneko.github.io/tags/vim/">vim</category>
      
      
      <comments>https://playneko.github.io/2020/05/24/rasberry-pi-005/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>라즈베리파이에서 vi editor 입력 오류 해결방법</title>
      <link>https://playneko.github.io/2020/05/24/rasberry-pi-004/</link>
      <guid>https://playneko.github.io/2020/05/24/rasberry-pi-004/</guid>
      <pubDate>Sat, 23 May 2020 18:00:00 GMT</pubDate>
      
      <description>&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;라즈베리파이 vi 입력오류 해결방법&lt;br&gt;라즈베리파이에서 vi를 사용하다보면 방향키와 입력시 글이 밀린다는지 여러가지 짜증난다는 분들이 많으실 겁니다.&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<!-- excerpt --><h2 id="라즈베리파이-vi-입력오류-해결방법"><a href="#라즈베리파이-vi-입력오류-해결방법" class="headerlink" title="라즈베리파이 vi 입력오류 해결방법"></a>라즈베리파이 vi 입력오류 해결방법</h2><p>라즈베리파이에서 vi를 사용하다보면 방향키와 입력시 글이 밀린다는지 여러가지 짜증난다는 분들이 많으실 겁니다.</p><p>그것을 해결하는 방법을 소개해 드리겠습니다.</p><p>일단 VIM부터 설치부터 하겠습니다만</p><p>일단 VNC로 라즈베리파이 서버로 접속하고 콘솔창을 여시기 바랍니다.</p><p>그리고 아래의 명령어를 차례대로 입력하시기 바랍니다.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ sudo apt-get update 엔터</span><br><span class="line"></span><br><span class="line">$ sudo apt-get install vim 엔터</span><br><span class="line"></span><br><span class="line">$ sudo vim ~/.vimrc</span><br><span class="line"></span><br><span class="line">(vim 설정 파일. 하이라이팅, 인덱스, 공백 칸 수동으로 설정을 할수 있습니다.)</span><br></pre></td></tr></table></figure><p><img src="001-3.png"></p><p><img src="002-3.png"></p><p><img src="003-3.png"></p><p><img src="005-3.png"></p><p><img src="007-3.png"></p><p>아래의 내용을 입력해 주시기 바랍니다.</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">set</span> <span class="keyword">number</span>                     # 줄 번호 표시</span><br><span class="line"><span class="keyword">set</span> tabstop=<span class="number">4</span>                  # <span class="keyword">tab</span>을 <span class="number">4</span>칸으로</span><br><span class="line"><span class="keyword">set</span> ignorecase                 # 검색시 대소문자 구별하지 않음</span><br><span class="line"><span class="keyword">set</span> hlsearch                   # 검색시 하이라이트</span><br><span class="line"><span class="keyword">set</span> fileencodings=utf-<span class="number">8</span>,euc-kr # 파일인코딩 형식</span><br><span class="line"><span class="keyword">set</span> bs=<span class="built_in">indent</span>,eol,start        # backspace 키 사용</span><br><span class="line"><span class="keyword">set</span> ruler                      # 상태표시줄 커서 위치 표시</span><br><span class="line"><span class="keyword">set</span> title                      # 제목 표시</span><br><span class="line"><span class="keyword">set</span> showmatch                  # 매칭되는 괄호 표시</span><br><span class="line"><span class="keyword">set</span> nowrap                     # 자동 줄바꿈 해제</span><br><span class="line"><span class="keyword">set</span> wmnu                       # <span class="keyword">tab</span> 자동완성시 가능한 목록 표시</span><br><span class="line"><span class="keyword">syntax</span> <span class="keyword">on</span>                      # 문법 하이라이트</span><br></pre></td></tr></table></figure><p><img src="009-3.png"></p><p>이걸로 설정이 끝났습니다.</p><p>이젠 vi, vim으로 입력시 짜증나는건 모두 해결이 됩니다.</p><p>vim 공식 사이트 입니다.</p><p><a href="https://www.vim.org/">https://www.vim.org/</a></p>]]></content:encoded>
      
      
      <category domain="https://playneko.github.io/categories/Rasberry-Pi/">Rasberry Pi</category>
      
      
      <category domain="https://playneko.github.io/tags/Rasberry-Pi/">Rasberry Pi</category>
      
      <category domain="https://playneko.github.io/tags/SSH/">SSH</category>
      
      <category domain="https://playneko.github.io/tags/VNC/">VNC</category>
      
      <category domain="https://playneko.github.io/tags/%E3%83%A9%E3%82%BA%E3%83%99%E3%83%AA%E3%83%BC%E3%83%91%E3%82%A4/">ラズベリーパイ</category>
      
      <category domain="https://playneko.github.io/tags/%EB%9D%BC%EC%A6%88%EB%B2%A0%EB%A6%AC%ED%8C%8C%EC%9D%B4/">라즈베리파이</category>
      
      <category domain="https://playneko.github.io/tags/vi/">vi</category>
      
      <category domain="https://playneko.github.io/tags/vim/">vim</category>
      
      
      <comments>https://playneko.github.io/2020/05/24/rasberry-pi-004/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>라즈베리파이 삼바 연결설정</title>
      <link>https://playneko.github.io/2020/05/24/rasberry-pi-003/</link>
      <guid>https://playneko.github.io/2020/05/24/rasberry-pi-003/</guid>
      <pubDate>Sat, 23 May 2020 17:00:00 GMT</pubDate>
      
      <description>&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;삼바(Samba)란?&lt;br&gt;삼바는 리눅스(UNIX-like)와 윈도우간에 파일 및 프린터를 공유 할 수 있게 해주는 패키지입니다.&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<!-- excerpt --><h2 id="삼바-Samba-란"><a href="#삼바-Samba-란" class="headerlink" title="삼바(Samba)란?"></a>삼바(Samba)란?</h2><p>삼바는 리눅스(UNIX-like)와 윈도우간에 파일 및 프린터를 공유 할 수 있게 해주는 패키지입니다.</p><p>컴퓨터 간 파일 공유등의 서비스를 구현하는데 SMB/CIFS 프로토콜를 사용하여, UNIX-like 시스템뿐 아니라 OpenVMS, OS/2, AmigaDOS,</p><p>그리고 Netware같은 다양한 플랫폼에서 지원됩니다. 삼바를 통해 리눅스 서버를 타운영체제와 파일을 공유할 수 있는 파일서버로도 사용할 수 있습니다.</p><p>라즈베리파이를 NAS 대용으로 사용하게 만들어주는 기능이라고 볼 수 있습니다.</p><p>삼바 공식 사이트</p><p><a href="https://www.samba.org/">https://www.samba.org/</a></p><blockquote><p>라즈베리파이에 삼바 연결하기</p></blockquote><p>VNC로 라즈베리파이에 접속을 한뒤 콘솔창을 실행합니다.</p><p><img src="001-2.png"></p><p>첫 단계로 다음 apt 명령어를 사용하여 삼바(samba) 패키지를 설치합니다.</p><p>콘솔창에 아래의 명령을 입력합니다.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo apt install samba samba-common-bin</span><br></pre></td></tr></table></figure><p><img src="002-2.png"></p><p>패키지 다운로드에 71메가 정도 용량을 사용해도 되는 물어보는 메세지가 나옵니다.</p><p>다운로드를 할건지 Y/n가 나올경우 Y를 입력후 엔터를 치시기 바랍니다.</p><p><img src="003-2.png"></p><p>다운로드를 시작합니다.</p><p><img src="004-2.png"></p><p>당신의 컴퓨터가 네트워크의 DHCP서버로부터 IP정보를 취득하고있을경우 DHCP서버는 네트워크의 WINS서버</p><p>(NetBIOS 네임서버)에 들어있는 정보를 공유하는게 가능합니다. DHCP에서 smb.conf파일의 변경이 필요한경우가 있습니다.</p><p>이 기능을 사용을 위해선 dhcp-client 패키지가 인스톨이 되어 있어야만 합니다.</p><p>DHCP에서 WINS설정을 사용해서 smb.conf를 변경하시겠습니까?라고 나옵니다만</p><p>알기 어려운 내용이기에 NO를 선택후 엔터를 칩니다.</p><p><img src="005-2.png"></p><p>일단 계속해서 패키지 설치가 진행됩니다.</p><p><img src="006-2.png"></p><p>한참 기다리시면 아래와 같이 나오며 설치가 완료 되었습니다.</p><p><img src="007-2.png"></p><p>설치가 완료되면 smbpasswd로 삼바를 사용할 id를 추가합니다.</p><p>이때 설정한 ID를 사용하여 같은 네트워크에 있는 컴퓨터에서 라즈베리파이로 삼바를 접속할때 사용하게 됩니다.</p><p>이때 설정할 ID와 비밀번호는 라즈베리파이와 똑같이 사용하지 않으셔도 됩니다.</p><p>일단 저는 라즈베리파이와 동일하게 ID를 pi를 사용하며 비밀번호도 동일하게 설정을 하도록 하겠습니다.</p><p>콘솔창에 아래의 명령어를 입력하시고 엔터를 치십시오. (아이디 부분은 원하시는 아이디를 입력해 주세요.)</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo smbpasswd -a pi(아이디/ユーザーID)</span><br></pre></td></tr></table></figure><p><img src="008-2.png"></p><p>아이디와 비밀번호를 세팅하시면 일반 접속정보는 설정이 완료 되었습니다.</p><p>이제는 삼바 설정을 해야합니다. 삼바 설정 파일인 smb.conf 편집합니다.</p><p>아래의 명령어를 입력하신후 엔터를 치십시오.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo vi /etc/samba/smb.conf</span><br></pre></td></tr></table></figure><p><img src="009-2.png"></p><p>커서를 가장 아래까지 내려간뒤 키보드의 a키를 누르시면 입력가능하게 바뀌게 됩니다.</p><p><img src="010-2.png"></p><p>아래의 내용을 입력하시기 바랍니다.</p><p>꼭 아래와 같이 하실필요 없이 자신이 원하는 설정으로 하시면 되겠습니다.</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[pi]</span><br><span class="line">   comment = pi shared folder</span><br><span class="line">   path = /home/pi</span><br><span class="line">   valid users = pi</span><br><span class="line">   browseable = yes</span><br><span class="line">   guest ok = <span class="keyword">no</span></span><br><span class="line">   <span class="keyword">read</span> <span class="keyword">only</span> = <span class="keyword">no</span></span><br><span class="line">   create mask = <span class="number">0777</span></span><br></pre></td></tr></table></figure><p><img src="011-2.png"></p><p>입력을 끝내셨으면 :키를 누르신후 wq를 입력후 저장과 동시에 vi입력창에서 빠져나오게 됩니다.</p><p><img src="012-2.png"></p><p><img src="013-2.png"></p><p>설정 완료 후에는 samba를 재시작 합니다.</p><p>아래의 명령어를 입력후 엔터를 치십시오.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo /etc/init.d/smbd restart</span><br></pre></td></tr></table></figure><p><img src="014-2.png"></p><p>이제 윈도우 탐색기에서 \\10.0.1.16\pi 와 같이 접속합니다.</p><p>주소 형식 : \\[라즈베리파이 IP 주소][삼바 계정 id]</p><p>본인 환경에 따라 주소를 입력하시면 됩니다.</p><p>입력 주소를 윈도우 탐색기에서 입력하면 아래와같이 계정 정보를 입력 메뉴가 실행됩니다.</p><p><img src="015-1.png"></p><p>라즈베리파이 서버로 접속이 되면 아래와 같이 폴더가 표시되게 됩니다.</p><p>일단 파일 읽기와 쓰기가 모두 되면 권한 설정이 정상입니다.</p><p>읽기와 쓰기에 권한 문제가 발생하면 smb.conf 파일에 설정을 점검이 필요합니다.</p><p><img src="017-1.png"></p>]]></content:encoded>
      
      
      <category domain="https://playneko.github.io/categories/Rasberry-Pi/">Rasberry Pi</category>
      
      
      <category domain="https://playneko.github.io/tags/Rasberry-Pi/">Rasberry Pi</category>
      
      <category domain="https://playneko.github.io/tags/SSH/">SSH</category>
      
      <category domain="https://playneko.github.io/tags/VNC/">VNC</category>
      
      <category domain="https://playneko.github.io/tags/%E3%83%A9%E3%82%BA%E3%83%99%E3%83%AA%E3%83%BC%E3%83%91%E3%82%A4/">ラズベリーパイ</category>
      
      <category domain="https://playneko.github.io/tags/%EB%9D%BC%EC%A6%88%EB%B2%A0%EB%A6%AC%ED%8C%8C%EC%9D%B4/">라즈베리파이</category>
      
      <category domain="https://playneko.github.io/tags/samba/">samba</category>
      
      <category domain="https://playneko.github.io/tags/server/">server</category>
      
      <category domain="https://playneko.github.io/tags/%EC%82%BC%EB%B0%94/">삼바</category>
      
      <category domain="https://playneko.github.io/tags/%EC%84%9C%EB%B2%84/">서버</category>
      
      
      <comments>https://playneko.github.io/2020/05/24/rasberry-pi-003/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>라즈베리파이 VNC설정</title>
      <link>https://playneko.github.io/2020/05/24/rasberry-pi-002/</link>
      <guid>https://playneko.github.io/2020/05/24/rasberry-pi-002/</guid>
      <pubDate>Sat, 23 May 2020 16:00:00 GMT</pubDate>
      
      <description>&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;VNC Viewer를 이용해서 라즈베리파이를 접속방법을 소개해 드리겠습니다.&lt;br&gt;그전에 라즈베리파이 OS를 설치하지 않으셨으면 먼저 라즈베리파이 OS부터 설치해 주세요.&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<!-- excerpt --><h2 id="VNC-Viewer를-이용해서-라즈베리파이를-접속방법을-소개해-드리겠습니다"><a href="#VNC-Viewer를-이용해서-라즈베리파이를-접속방법을-소개해-드리겠습니다" class="headerlink" title="VNC Viewer를 이용해서 라즈베리파이를 접속방법을 소개해 드리겠습니다."></a>VNC Viewer를 이용해서 라즈베리파이를 접속방법을 소개해 드리겠습니다.</h2><p>그전에 라즈베리파이 OS를 설치하지 않으셨으면 아래의 링크를 클릭하신후 먼저 라즈베리파이 OS부터 설치해 주세요.</p><p><a href="https://akibatv.net/archives/373">https://akibatv.net/archives/373</a></p><p>VNC Viewer는 아래의 사이트에서 다운로드 받을수 있습니다.</p><p><a href="https://www.realvnc.com/en/connect/download/viewer/">https://www.realvnc.com/en/connect/download/viewer/</a></p><p><img src="20200524_172558.png"></p><p>VNC Viewer를 설치후 실행을 합니다.</p><p>파일-&gt;New connection을 선택합니다.</p><p><img src="001-1.png"></p><p>라즈베리파이의 아이피주소와 이름을 적고 OK를 눌러주세요.</p><p>다른설정은 건들일 필요는 없습니다.</p><p><img src="002-1.png"></p><p>추가한 서버를 선택하면 아이디와 비밀번호 입력창이 나오게 됩니다.</p><p>아이디와 비밀번호를 입력하신후 OK를 눌러주세요.</p><p><img src="003-1.png"></p><p>접속이 되시면 아래의 화면이 나오게 됩니다.</p><p>아래의 화면까지 나오면 일단 기본적인 VNC설정은 끝나게 됩니다.</p><p>라즈베리파이를 처음 접속하시면 기본 설정을 하라는 메세지가 나오게 되며</p><p>설정을 원하시는 분은 다음버튼 필요 없으신 분은 캔슬을 눌러주세요.</p><p><img src="004-1.png"></p><p>다음 버튼을 누르면 스크린설정이 나오지만 다음 버튼을 눌러서 넘어갑니다.</p><p><img src="009-1.png"></p><p>비밀번호 설정창이 나오면 새비밀번호를 입력하시고 다음버튼을 눌러주세요.</p><p><img src="008-1.png"></p><p>국가와 언어를 설정을 하시고 다음버튼을 눌러주세요.</p><p>저의 경우는 일본어 키보드를 설정하고 있기에 국가와 언어를 일본어로 설정하겠습니다.</p><p><img src="005-1.png"></p><p>와이파이 설정 화면입니다.</p><p>와이파이 설정이 필요하신경우 설정을 해주시고 필요가 없으시면 스킵을 해주세요.</p><p><img src="010-1.png"></p><p>소프트웨어를 최신버전으로 업데이트 하겠냐고 물어봅니다.</p><p>일단 최신상태로 해두는게 좋기에 다음을 눌러주시는걸 추천합니다.</p><p><img src="011-1.png"></p><p>업데이트가 진행되고 있습니다.</p><p>각종 프로그램들을 최신버전으로 업데이트하기에 시간이 좀 많이 걸리겠습니다.</p><p><img src="012-1.png"></p><p>드디어 업데이트가 끝났습니다.</p><p>OK버튼을 눌러주시기 바랍니다.</p><p><img src="013-1.png"></p><p>업데이트가 끝나고 재시동을 할것인지 다음에 할것인지 선택하시면</p><p>라즈베리의 기본 업데이트까지는 완료됩니다.</p><p><img src="014-1.png"></p>]]></content:encoded>
      
      
      <category domain="https://playneko.github.io/categories/Rasberry-Pi/">Rasberry Pi</category>
      
      
      <category domain="https://playneko.github.io/tags/Rasberry-Pi/">Rasberry Pi</category>
      
      <category domain="https://playneko.github.io/tags/SSH/">SSH</category>
      
      <category domain="https://playneko.github.io/tags/VNC/">VNC</category>
      
      <category domain="https://playneko.github.io/tags/%E3%83%A9%E3%82%BA%E3%83%99%E3%83%AA%E3%83%BC%E3%83%91%E3%82%A4/">ラズベリーパイ</category>
      
      <category domain="https://playneko.github.io/tags/%EB%9D%BC%EC%A6%88%EB%B2%A0%EB%A6%AC%ED%8C%8C%EC%9D%B4/">라즈베리파이</category>
      
      
      <comments>https://playneko.github.io/2020/05/24/rasberry-pi-002/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>모니터없이 라즈베리파이3 B 설치하기</title>
      <link>https://playneko.github.io/2020/05/24/rasberry-pi-001/</link>
      <guid>https://playneko.github.io/2020/05/24/rasberry-pi-001/</guid>
      <pubDate>Sat, 23 May 2020 15:00:00 GMT</pubDate>
      
      <description>&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;모니터없이 라즈베리파이3 B 설치하기를 설명하겠습니다.&lt;br&gt;라즈베리파이3 B에 라즈베리파이 OS를 설치하기 위해선…&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<!-- excerpt --><h2 id="모니터없이-라즈베리파이3-B-설치하기를-설명하겠습니다"><a href="#모니터없이-라즈베리파이3-B-설치하기를-설명하겠습니다" class="headerlink" title="모니터없이 라즈베리파이3 B 설치하기를 설명하겠습니다."></a>모니터없이 라즈베리파이3 B 설치하기를 설명하겠습니다.</h2><p>라즈베리파이3 B에 라즈베리파이 OS를 설치하기 위해선</p><ul><li>준비물<ul><li>라즈베리파이 3B 또는 라즈베리파이 Zero</li><li>SD카드(8기가 이상)</li><li>컴퓨터</li><li>인터넷</li></ul></li></ul><p>준비물이 준비되어 있으면<br>아래의 링크에서 라즈베리파이 OS를 다운로드 합니다.<br><a href="https://www.raspberrypi.org/downloads/">https://www.raspberrypi.org/downloads/</a></p><p><img src="001.png"></p><p>Raspbian을 클릭하면 다운로드 페이지로 이동하게 됩니다.</p><p><img src="002.png"></p><p>Raspbian Stretch with desktop : strach, sonic Pi 등 일부 소프트웨어가 제외된 파일입니다.</p><p>python, VLC media player 등의 소프트웨어는 설치되어 있습니다.</p><p>Raspbian Stretch Lite : Desktop GUI가 없는 파일이기 때문에 text ccommand로만 동작 가능합니다.</p><p>zero 모델처럼 저사양에 프로그램만 기능하게 하는 용도로 주로 사용한다고 합니다.</p><p>원하는 버전을 토렌트 또는 압축파일로 선택해서 다운로드 하실수 있습니다.</p><p>저의 경우 Raspbian Stretch with desktop를 다운로드 합니다.</p><p>SD카드에 OS를 설치하기 위해 balenaEtcher이라는 프로그램을 설치했습니다.</p><p><a href="https://www.balena.io/etcher/">https://www.balena.io/etcher/</a></p><p><img src="003.png"></p><p><img src="004.png"></p><p>OS에 맞는걸 다운로드 하시면 되겠습니다.</p><p><img src="005.png"></p><p>설치프로그램을 실행후 설치를 진행하시면 됩니다.</p><p><img src="006.png"></p><p>설치가 완료되었으면 프로그램을 기동하시고 SD카드를 컴퓨터에 삽입 합니다.</p><p><img src="007.png"></p><p>다운로드한 라즈베리파이 OS IMG파일을 선택하시면 번개마크가 활성화가 되며 Flash!버튼을 클릭하시면</p><p>데이터가 SD카드에 넣기 시작합니다.</p><p><img src="008.png"></p><p><img src="009.png"></p><p>조금 시간이 걸리니 느긋하게 기다리시면 됩니다.</p><p><img src="010.png"></p><p><img src="011.png"></p><p>설치가 완료 되었습니다.</p><p>SD카드를 추출하고 다시 삽입을 해주시기 바랍니다.</p><p>원격으로 SSH로 라즈베리파이를 접속하기 위해선 2가지 방법이 있습니다.</p><ol><li>유선랜으로 접속방법 네트워크의 내부 IP를 미리 파악해 두셔야만 합니다.</li><li>무선랜을 설정후 접속방법</li></ol><p>아래의 설정은 무선랜으로 라즈베리파이에 접속법을 설명 합니다.</p><p><img src="012.png"></p><p>SSH접속 설정을 위해선 우선 SD카드안에 텍스트 문서를 추가 합니다.</p><p><img src="013.png"></p><p>추가된 텍스트 문서를 여시고</p><p><img src="014.png"></p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ctrl_interface=DIR=/var/run/wpa_supplicant GROUP=netdev</span><br><span class="line">update_config=1 network=&#123; ssid=&quot;wifi ssid&quot;   psk=&quot;wifi password&quot;   key_mgmt=WPA-PSK &#125;</span><br></pre></td></tr></table></figure><p>텍스트 문서 파일의 이름을 wpa_supplicant.conf로 변경합니다.</p><p><img src="015.png"></p><p>여기까지가 무선랜을 이용한 설정법 입니다.</p><p>이후의 설정은 유선, 무선 모두 해당하는 내용 입니다.</p><p>이젠 SSH파일이 있어야 유선랜 또는 무선랜에서 wpa_supplicant.conf에 설정한 값대로 SSH 기능을 활성화시킵니다.</p><p>추가로 텍스트 문서를 추가 합니다.</p><p><img src="016.png"></p><p>폴더안의 숨겨진 확장자를 전부 보이게 합니다.</p><p><img src="019.png"></p><p><img src="020.png"></p><p>새로 추가한 SSH파일의 확장자를 삭제 합니다.</p><p>이제 기본준비는 모두 끝났으니 SD카드를 추출하시고</p><p>라즈베리파이에 삽입하시고 전원을 넣어주세요.</p><p>라즈베리파이에 할당된 아이피의 확인은 사용중이신 공유기에서 확인하시면 됩니다.</p><p>SSH접속을 위해 접속프로그램이 필요합니다.</p><p>이미 설치된 프로그램 또는 설치가 필요하신 경우 저는 putty를 이용하고 있습니다.</p><p><a href="https://www.chiark.greenend.org.uk/~sgtatham/putty/">https://www.chiark.greenend.org.uk/~sgtatham/putty/</a></p><p><img src="024.png"></p><p>Download it hear.링크를 클릭 합니다.</p><p><img src="025.png"></p><p>각 환경에 맞는 프로그램을 다운로드 하시면 됩니다.</p><p><img src="022.png"></p><p>Putty를 실행하시면 위와같은 화면이 나오게 되며 아이피를 입력하신후 오픈을 클릭해 주세요.</p><p><img src="023.png"></p><p>접속이 되시면 아래의 초기 아이디와 비밀번호를 입력해 주세요.</p><ul><li>ID : pi</li><li>PW : raspberry</li></ul><p>정상적으로 접속이 되셨으면 기본적인 세팅을 통해 항상 SSH또는 VNC를 활성화 시켜줍니다.</p><p>sudo raspi-config를 입력해 주세요.</p><p><img src="026.png"></p><p><img src="027.png"></p><p>설정화면이 나오면 우선 비밀번호를 재설정 합니다.</p><p>이대로 엔터를 치시기 바랍니다.</p><p><img src="028.png"></p><p>다시한번 엔터</p><p><img src="029.png"></p><p>새로운 비밀번호와 확인 비밀번호를 입력합니다.</p><p><img src="030.png"></p><p>설정이 완료되었다고 나왔으니 엔터</p><p><img src="031.png"></p><p>SSH와 VNC설정을 위해서 5번메뉴로 이동하시고 엔터</p><p><img src="032.png"></p><p>항상 SSH가 활성화를 위해 SSH항목에서 엔터</p><p><img src="033.png"></p><p><YES>에 놓고 엔터를 칩니다.</p><p><img src="034.png"></p><p>활성화 설정이 완료 되었습니다.</p><p><img src="035.png"></p><p>이번에는 VNC항목에서 엔터</p><p><img src="036.png"></p><p><YES>에 놓고 엔터를 칩니다.</p><p><img src="037.png"></p><p>활성화 설정이 완료 되었습니다.</p><p><img src="038.png"></p><p>최신 업데이트를 위해서 업데이트 항목에서 엔터를 칩니다.</p><p><img src="039.png"></p><p>업데이트에 필요한 파일을 다운로드와 설치를 진행하게 됩니다.</p><p><img src="040.png"></p><p>이렇게해서 라즈베리파이 OS설치와 기본설정이 완료 되었습니다.</p>]]></content:encoded>
      
      
      <category domain="https://playneko.github.io/categories/Rasberry-Pi/">Rasberry Pi</category>
      
      
      <category domain="https://playneko.github.io/tags/Rasberry-Pi/">Rasberry Pi</category>
      
      <category domain="https://playneko.github.io/tags/SSH/">SSH</category>
      
      <category domain="https://playneko.github.io/tags/VNC/">VNC</category>
      
      <category domain="https://playneko.github.io/tags/%E3%83%A9%E3%82%BA%E3%83%99%E3%83%AA%E3%83%BC%E3%83%91%E3%82%A4/">ラズベリーパイ</category>
      
      <category domain="https://playneko.github.io/tags/%EB%9D%BC%EC%A6%88%EB%B2%A0%EB%A6%AC%ED%8C%8C%EC%9D%B4/">라즈베리파이</category>
      
      
      <comments>https://playneko.github.io/2020/05/24/rasberry-pi-001/#disqus_thread</comments>
      
    </item>
    
  </channel>
</rss>
